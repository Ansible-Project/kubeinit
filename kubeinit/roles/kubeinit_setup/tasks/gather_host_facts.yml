---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


- name: Confirm that we can run ssh to _param_gather_host
  ansible.builtin.command: |
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_{{ kubeinit_common_ssh_keytype }} {{ kubeinit_setup_remote_user }}@{{ hostvars[_param_gather_host].ansible_host }} echo connected
  register: _result_ssh
  failed_when: _result_ssh is not defined
  delegate_to: localhost
  when: not kubeinit_facts_hostvars.container_build|bool

- name: Provide informative message if ssh connect fails
  ansible.builtin.fail:
    msg: "Kubeinit setup requires ssh remote access to {{ kubeinit_setup_remote_user }}@{{ hostvars[_param_gather_host].ansible_host }}"
  when: not kubeinit_facts_hostvars.container_build|bool and _result_ssh.stdout != 'connected'

- name: Confirm that we can run ssh to _param_gather_host, and sudo without a password
  ansible.builtin.command: |
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_{{ kubeinit_common_ssh_keytype }} {{ kubeinit_setup_remote_user }}@{{ hostvars[_param_gather_host].ansible_host }} sudo echo sudoer
  register: _result_sudo
  failed_when: _result_sudo is not defined
  delegate_to: localhost
  when: not kubeinit_facts_hostvars.container_build|bool

- name: Provide informative message if sudo on ssh connect fails
  ansible.builtin.fail:
    msg: "Kubeinit setup requires {{ kubeinit_setup_remote_user }} be able to run sudo on remote host {{ hostvars[_param_gather_host].ansible_host }}"
  when: not kubeinit_facts_hostvars.container_build|bool and _result_sudo.stdout != 'sudoer'

- name: Confirm that we can run ssh to _param_gather_host, sudo without a password, and the python interpreter is present
  ansible.builtin.command: |
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_{{ kubeinit_common_ssh_keytype }} {{ kubeinit_setup_remote_user }}@{{ hostvars[_param_gather_host].ansible_host }} sudo ls {{ ansible_python_interpreter }}
  register: _result_python_present
  failed_when: _result_python_present is not defined
  delegate_to: localhost
  when: not kubeinit_facts_hostvars.container_build|bool

- name: If we couldn't find python interpreter try to install it using ssh and sudo
  block:

    - name: Provide informative message if python not present on remote host
      ansible.builtin.debug:
        msg: "Kubeinit setup requires that {{ ansible_python_interpreter }} be installed on remote host {{ hostvars[_param_gather_host].ansible_host }}, will attempt to install it remotely."

    - name: Fetch contents of /etc/os-release
      ansible.builtin.command: |
        ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_{{ kubeinit_common_ssh_keytype }} {{ kubeinit_setup_remote_user }}@{{ hostvars[_param_gather_host].ansible_host }} cat /etc/os-release
      register: _result_os_release
      delegate_to: localhost

    - name: Run python install
      ansible.builtin.command: |
        ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_{{ kubeinit_common_ssh_keytype }} {{ kubeinit_setup_remote_user }}@{{ hostvars[_param_gather_host].ansible_host }} sudo {{ python_package_manager }} install -y {{ python_package }}
      register: _result_python_install
      vars:
        python_package_manager: "{{ 'dnf' if (_result_os_release.stdout is match('.*[Cc][Ee][Nn][Tt][Oo][Ss].*')) else 'apt-get' }}"
        python_package: "{{ 'python39' if (_result_os_release.stdout is match('.*[Cc][Ee][Nn][Tt][Oo][Ss].*')) else 'python3' }}"
      delegate_to: localhost

    - name: Reconfirm that we can run ssh to _param_gather_host, sudo without a password, and the python interpreter is present
      ansible.builtin.command: |
        ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=accept-new -i ~/.ssh/id_{{ kubeinit_common_ssh_keytype }} {{ kubeinit_setup_remote_user }}@{{ hostvars[_param_gather_host].ansible_host }} sudo ls {{ ansible_python_interpreter }}
      register: _result_python_present_recheck
      failed_when: _result_python_present_recheck is not defined
      delegate_to: localhost

    - name: Provide informative message if python not present on remote host
      ansible.builtin.fail:
        msg: "Kubeinit setup requires that {{ ansible_python_interpreter }} be installed on remote host {{ hostvars[_param_gather_host].ansible_host }}"
      when: _result_python_present_recheck.stdout != ansible_python_interpreter

  when: not kubeinit_facts_hostvars.container_build|bool and _result_python_present.stdout != ansible_python_interpreter

- name: Delegate to _param_gather_host
  block:

    - name: Confirm that we have ansible host connectivity
      ansible.builtin.ping:

    - name: Gather network facts
      ansible.builtin.gather_facts:
        gather_subset: "!all,network"
      register: _result_facts
      no_log: true

    - name: Set distro_family for CentOS
      ansible.builtin.set_fact:
        distro_family: "CentOS"
        host_os: "centos"
        package_manager: auto
        package_pip: "python39-pip"
        pip_executable: "pip3.9"
      when: _result_facts.ansible_facts.ansible_distribution == 'CentOS'

    - name: Set distro_family for RedHat
      ansible.builtin.set_fact:
        distro_family: "CentOS"
        host_os: "redhat"
        package_manager: auto
        package_pip: "python39-pip"
        pip_executable: "pip3.9"
      when: _result_facts.ansible_facts.ansible_distribution == 'RedHat'

    - name: Set distro_family for Fedora
      ansible.builtin.set_fact:
        distro_family: "Fedora"
        host_os: "fedora"
        package_manager: auto
        package_pip: "python39-pip"
        pip_executable: "pip3.9"
      when: _result_facts.ansible_facts.ansible_distribution == 'Fedora'

    - name: Set distro_family for Debian
      ansible.builtin.set_fact:
        distro_family: "Debian"
        host_os: "debian"
        package_manager: "apt"
        package_pip: "python3-pip"
        pip_executable: "pip3"
      when: _result_facts.ansible_facts.ansible_distribution == 'Debian'

    - name: Set distro_family for Ubuntu
      ansible.builtin.set_fact:
        distro_family: "Debian"
        host_os: "ubuntu"
        package_manager: "apt"
        package_pip: "python3-pip"
        pip_executable: "pip3"
      when: _result_facts.ansible_facts.ansible_distribution == 'Ubuntu'

    - name: Fails if OS is not supported
      ansible.builtin.fail:
        msg: "The host \"{{ hostvars[_param_gather_host].ansible_host }}\" needs to be CentOS/RHEL, Fedora, or Debian/Ubuntu"
      when: not distro_family is defined

    - name: Set ssh_host_key_info
      ansible.builtin.set_fact:
        ssh_host_key_info: "{{ _result_facts.ansible_facts.ansible_ssh_host_key_ecdsa_public_keytype }} {{ _result_facts.ansible_facts.ansible_ssh_host_key_ecdsa_public }}"
      when: >
        _result_facts.ansible_facts.ansible_ssh_host_key_ecdsa_public_keytype is defined and
        _result_facts.ansible_facts.ansible_ssh_host_key_ecdsa_public is defined

    - name: Gather the package facts
      ansible.builtin.package_facts:
        manager: "{{ package_manager }}"
      register: _result_packages
      no_log: true

    - name: Set podman_installed
      ansible.builtin.set_fact:
        podman_installed: "{{ true if ('podman' in _result_packages.ansible_facts.packages) else false }}"

    - name: Gather the services facts
      ansible.builtin.service_facts:
      register: _result_services
      no_log: true

    - name: Set firewalld_state to unknown
      ansible.builtin.set_fact:
        firewalld_state: 'unknown'

    - name: Set firewalld_state when firewalld is defined
      ansible.builtin.set_fact:
        firewalld_state: "{{ _result_services.ansible_facts.services['firewalld'].state }}"
      when: _result_services.ansible_facts.services['firewalld'] is defined

    - name: Set firewalld_state when firewalld.service is defined
      ansible.builtin.set_fact:
        firewalld_state: "{{ _result_services.ansible_facts.services['firewalld.service'].state }}"
      when: _result_services.ansible_facts.services['firewalld.service'] is defined

    - name: Set firewalld_active
      ansible.builtin.set_fact:
        firewalld_active: "{{ true if firewalld_state == 'running' else false }}"

    - name: Clear podman_state
      ansible.builtin.set_fact:
        podman_state: ''

    - name: Set podman_state when podman is defined
      ansible.builtin.set_fact:
        podman_state: "{{ _result_services.ansible_facts.services['podman'].state }}"
      when: _result_services.ansible_facts.services['podman'] is defined

    - name: Set podman_state when podman.service is defined
      ansible.builtin.set_fact:
        podman_state: "{{ _result_services.ansible_facts.services['podman.service'].state }}"
      when: _result_services.ansible_facts.services['podman.service'] is defined

    - name: Set podman_active
      ansible.builtin.set_fact:
        podman_active: "{{ true if podman_state == 'running' else false }}"

    - name: Add ansible facts to hostvars
      ansible.builtin.add_host:
        name: "{{ _param_gather_host }}"
        ansible_default_ipv4_address: "{{ _result_facts.ansible_facts.ansible_default_ipv4.address | default(omit) }}"
        ansible_hostname: "{{ _result_facts.ansible_facts.ansible_hostname }}"
        ansible_distribution: "{{ _result_facts.ansible_facts.ansible_distribution }}"
        ansible_distribution_major_version: "{{ _result_facts.ansible_facts.ansible_distribution_major_version }}"
        distribution_family: "{{ distro_family }}"
        ssh_host_key_ecdsa: "{{ ssh_host_key_info | default(omit) }}"
        os: "{{ hostvars[_param_gather_host].os if (hostvars[_param_gather_host].os is defined) else host_os }}"
        package_manager: "{{ package_manager }}"
        package_pip: "{{ package_pip }}"
        pip_executable: "{{ pip_executable }}"
        firewalld_is_active: "{{ firewalld_active }}"
        podman_is_installed: "{{ podman_installed }}"
        podman_is_active: "{{ podman_active }}"
        remote_path: "{{ _result_facts.ansible_facts.ansible_env['PATH'] }}"
        remote_home: "{{ _result_facts.ansible_facts.ansible_env['HOME'] }}"
        ssh_connection_address: "{{ omit if (_result_facts.ansible_facts.ansible_env['SSH_CONNECTION'] is not defined) else _result_facts.ansible_facts.ansible_env['SSH_CONNECTION'].split(' ')[2] }}"
        runtime_path: "{{ _result_facts.ansible_facts.ansible_env['XDG_RUNTIME_DIR'] | default('') | string }}"

    - name: Update kubeinit_facts_hostvars
      ansible.builtin.set_fact:
        kubeinit_facts_hostvars: "{{ hostvars[kubeinit_facts_name] }}"
      no_log: true
      when: kubeinit_facts_hostvars is defined

    - name: Clear results
      ansible.builtin.set_fact:
        _result_facts: null
        _result_packages: null
        _result_services: null

  delegate_to: "{{ _param_gather_host }}"
