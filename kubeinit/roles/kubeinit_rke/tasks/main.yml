---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Prepare services if needed
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_services"
    tasks_from: prepare_services.yml
    public: true
  vars:
    task_completed: "{{ hostvars['kubeinit-facts'] is defined }}"
  when: not task_completed

- block:
    - name: Check to see if we should stop here
      ansible.builtin.debug: msg="Stopping before '{{ kubeinit_stop_before_task }}'"
    - name: End play
      ansible.builtin.meta: end_play
  when: kubeinit_stop_before_task is defined and kubeinit_stop_before_task == 'task-deploy-cluster'

- name: Deploy the cluster nodes
  ansible.builtin.include_role:
    name: "../../roles/kubeinit_libvirt"
    tasks_from: deploy_ubuntu_guest.yml
    public: yes
  loop: "{{ groups['all_cluster_nodes'] }}"
  loop_control:
    loop_var: cluster_node
  vars:
    kubeinit_deployment_node_name: "{{ cluster_node }}"
    kubeinit_deployment_delegate: "{{ hostvars[cluster_node].target }}"
    kubeinit_deployment_role: cluster
  when: kubeinit_cluster_nodes_deployed is not defined or not kubeinit_cluster_nodes_deployed

- name: Add cluster authorized keys in cluster nodes
  ansible.posix.authorized_key:
    user: root
    key: "{{ authorized_key }}"
    state: present
  loop: "{{ groups['all_cluster_nodes'] | product(kubeinit_cluster_hostvars.authorized_keys) }}"
  vars:
    cluster_node: "{{ item[0] }}"
    authorized_key: "{{ item[1] }}"
  delegate_to: "{{ cluster_node }}"

- name: Enable insecure registry in Docker
  ansible.builtin.shell: |
    # This is mandatory so the cluster nodes can fetch the
    # images from the local (insecure) registry
    sed -i '/^ExecStart=/ s/$/ --insecure-registry {{ kubeinit_registry_uri }}/' /lib/systemd/system/docker.service
    systemctl daemon-reload
    systemctl restart docker
  args:
    executable: /bin/bash
  register: _result
  changed_when: "_result.rc == 0"
  loop: "{{ groups['all_cluster_nodes'] }}"
  loop_control:
    loop_var: cluster_node
  delegate_to: "{{ cluster_node }}"
  when: "'registry' in kubeinit_cluster_hostvars.services"

- name: "Install RKE"
  ansible.builtin.shell: |
    ~/rke --version
    ~/rke up --ignore-docker-version -disable-port-check
  args:
    executable: /bin/bash
  register: _result
  changed_when: "_result.rc == 0"
  delegate_to: "{{ kubeinit_provision_service_node }}"

- name: Autoload kubeconfig
  ansible.builtin.shell: |
    echo "export KUBECONFIG=~/kube_config_cluster.yml" >> ~/.bashrc
  args:
    executable: /bin/bash
  ignore_errors: yes
  register: _result
  changed_when: "_result.rc == 0"
  delegate_to: "{{ kubeinit_provision_service_node }}"

- name: Create kube directory
  ansible.builtin.file:
    path: ~/.kube
    state: directory
    mode: '0644'
  delegate_to: "{{ kubeinit_provision_service_node }}"

- name: Copy the kubeconfig
  ansible.builtin.shell: |
    cp ~/kube_config_cluster.yml ~/.kube/config
  args:
    executable: /bin/bash
  register: _result
  changed_when: "_result.rc == 0"
  delegate_to: "{{ kubeinit_provision_service_node }}"

- name: Add task-deploy-cluster to tasks_completed
  ansible.builtin.add_host:
    name: "{{ kubeinit_cluster_facts_name }}"
    tasks_completed: "{{ kubeinit_cluster_hostvars.tasks_completed | union(['task-deploy-cluster']) }}"

- name: Update kubeinit_cluster_hostvars
  ansible.builtin.set_fact:
    kubeinit_cluster_hostvars: "{{ hostvars[kubeinit_cluster_facts_name] }}"

- block:
    - name: Check to see if we should stop here
      ansible.builtin.debug: msg="Stopping after '{{ kubeinit_stop_after_task }}'"
    - name: End play
      ansible.builtin.meta: end_play
  when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task in kubeinit_cluster_hostvars.tasks_completed
