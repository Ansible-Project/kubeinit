---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Deploy CDK
  block:
    - name: Render the cluster template
      ansible.builtin.template:
        src: "cloud.yml.j2"
        dest: "~/cloud.yml"
        mode: '0644'

    - name: Render the bundle template
      ansible.builtin.template:
        src: "bundle.yml.j2"
        dest: "~/bundle.yml"
        mode: '0644'

    - name: "Install the CDK juju installer"
      ansible.builtin.shell: |
        ssh-keyscan {{ kubeinit_services_provision_address }}
        sleep 2
        ssh-keyscan {{ kubeinit_services_provision_address }} >> ~/.ssh/known_hosts
        cd
        cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
        # Make sure the private key has the correct perms
        chmod 600 ~/.ssh/id_rsa
        snap install juju --classic
        juju add-cloud --local {{ kubeinit_inventory_cluster_name }} -f cloud.yml
      register: install_juju
      changed_when: "install_juju.rc == 0"

    - name: "Bootstrap the CDK controller"
      ansible.builtin.shell: |
        juju bootstrap --no-gui \
            --debug \
            --bootstrap-series=focal \
            manual/root@{{ kubeinit_services_provision_address }} > juju-bootstrap.log 2>&1
      register: bootstrap_cdk
      changed_when: "bootstrap_cdk.rc == 0"

    - name: "Show juju info"
      ansible.builtin.shell: |
        juju controllers
        juju status --format=yaml
      register: show_juju_info
      changed_when: "show_juju_info.rc == 0"

    - name: "Add machines"
      ansible.builtin.shell: |
        ssh-keyscan {{ hostvars[item].ansible_host }}
        sleep 2
        ssh-keyscan {{ hostvars[item].ansible_host }} >> ~/.ssh/known_hosts
        juju add-machine --debug ssh:root@{{ hostvars[item].ansible_host }} > juju-add-machine-{{ item }}.log 2>&1
      register: add_cdk_machines
      changed_when: "add_cdk_machines.rc == 0"
      with_items:
        - "{{ groups['all_control_plane_nodes'] + groups['all_compute_nodes'] | list }}"

    - name: "verify that all cluster nodes are started"
      ansible.builtin.shell: |
        set -o pipefail
        juju machines | grep started
      args:
        executable: /bin/bash
      register: cmd_res
      changed_when: "cmd_res.rc == 0"
      retries: 60
      delay: 60
      # We should have all the master and worker nodes started
      until: cmd_res.stdout_lines | list | count == ( groups['all_control_plane_nodes'] | count + groups['all_compute_nodes'] | count )

    - name: "Deploy CDK"
      ansible.builtin.shell: |
        juju deploy ./bundle.yml --force --map-machines=existing{% for item in (groups['all_control_plane_nodes'] + groups['all_compute_nodes']) -%},{{ loop.index0 }}={{ loop.index0 }}{%- endfor %}
      register: install_cdk
      changed_when: "install_cdk.rc == 0"
      retries: 20
      until: install_cdk.rc == 0

    - name: "Get cluster status"
      ansible.builtin.shell: |
        juju status
      register: status_cdk
      changed_when: "status_cdk.rc == 0"

    - name: "verify that the etcd cluster is up and healthy"
      ansible.builtin.shell: |
        set -o pipefail
        juju status --format=json | sed 's/application-status/application_status/g' | jq -r .applications.etcd.application_status.message | grep Healthy
      args:
        executable: /bin/bash
      register: etcd_res
      changed_when: "etcd_res.rc == 0"
      retries: 60
      delay: 60
      until: "'Healthy with {{ groups['all_control_plane_nodes'] | count | string }} known peer' in etcd_res.stdout"

    - name: Create kube directory
      ansible.builtin.file:
        path: ~/.kube
        state: directory
        mode: '0777'

    - name: Delegate to master node
      block:
        - name: Make sure the kubeconfig file exists in the master node
          ansible.builtin.stat:
            path: ~/.kube/config
          register: kconf_result
          retries: 60
          delay: 60
          until: kconf_result.stat.exists

        - name: Copying the kubeconfig to a variable
          ansible.builtin.slurp:
            src: ~/.kube/config
          register: kubeinit_cdk_cluster_kubeconfig
      delegate_to: "{{ hostvars[kubeinit_first_controller_node].ansible_host }}"

    - name: Storing the master kubeconfig to the services machine.
      ansible.builtin.copy:
        content: "{{ kubeinit_cdk_cluster_kubeconfig.content | default('Empty file') | b64decode }}"
        dest: ~/.kube/config
        mode: '0644'

    - name: Autoload kubeconfig
      ansible.builtin.shell: |
        echo "export KUBECONFIG=~/.kube/config" >> ~/.bashrc
      register: autoload
      changed_when: "autoload.rc == 0"
  delegate_to: "{{ hostvars[kubeinit_deployment_node_name].ansible_host }}"
