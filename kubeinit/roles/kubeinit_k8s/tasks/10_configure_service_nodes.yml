---
# Copyright kubeinit.com
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: install services requirements
  yum:
    name: "{{ kubeinit_k8s_service_dependencies }}"
    state: present
    use_backend: dnf
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_service_nodes'] }}"
  tags:
    - provision_libvirt

#
# Configure bind
#

- name: Create named.conf
  template:
    src: "named.conf.j2"
    dest: "/etc/named.conf"
    mode: '0644'
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_service_nodes'] }}"
  tags:
    - provision_libvirt

- name: Create named.conf.local
  template:
    src: "named.conf.local.j2"
    dest: "/etc/named/named.conf.local"
    mode: '0644'
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_service_nodes'] }}"
  tags:
    - provision_libvirt

- name: Create BIND zones directoy
  file:
    path: /etc/named/zones
    state: directory
    mode: '0777'
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_service_nodes'] }}"
  tags:
    - provision_libvirt

- name: Create BIND zones directoy
  file:
    path: /etc/named/zones/internals
    state: directory
    mode: '0777'
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_service_nodes'] }}"
  tags:
    - provision_libvirt

- name: Create BIND zones directoy
  file:
    path: /etc/named/zones/externals
    state: directory
    mode: '0777'
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_service_nodes'] }}"
  tags:
    - provision_libvirt

- name: Create BIND db internal subnet
  template:
    src: "internals_db.j2"
    dest: "/etc/named/zones/internals/db.{{ hostvars[item].ansible_host | ipsubnet(24) | ipaddr('network') }}"
    mode: '0644'
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_service_nodes'] }}"
  tags:
    - provision_libvirt

- name: Create BIND db internal zone
  template:
    src: "internals_db.local.j2"
    dest: "/etc/named/zones/internals/db.{{ kubeinit_common_cluster_name }}.{{ kubeinit_common_cluster_domain }}"
    mode: '0644'
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_service_nodes'] }}"
  tags:
    - provision_libvirt

- name: Create BIND db external zone
  template:
    src: "externals_db.local.j2"
    dest: "/etc/named/zones/externals/db.{{ kubeinit_common_cluster_name }}.{{ kubeinit_common_cluster_domain }}"
    mode: '0644'
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_service_nodes'] }}"
  when: kubeinit_libvirt_external_service_interface_enabled | default(false)
  tags:
    - provision_libvirt

- name: Disable IPv6 support
  lineinfile:
    dest: /etc/sysconfig/named
    line: 'OPTIONS="-4"'
    regexp: "^OPTIONS"
    mode: '0644'
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_service_nodes'] }}"
  tags:
    - provision_libvirt

- name: Start and enable bind service
  service: name=named state=started enabled=yes
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_service_nodes'] }}"
  tags:
    - provision_libvirt

#
# Configure HAproxy
#

- name: Create HAProxy config file
  template:
    src: "haproxy.cfg.j2"
    dest: "/etc/haproxy/haproxy.cfg"
    mode: '0644'
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_service_nodes'] }}"
  tags:
    - provision_libvirt

- name: "allow access to the cluster"
  shell: |
    setsebool -P haproxy_connect_any 1
    setsebool -P httpd_read_user_content 1
  register: allow_haproxy_connect
  changed_when: "allow_haproxy_connect.rc == 0"
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_service_nodes'] }}"
  tags:
    - provision_libvirt

- name: Start and enable haproxy service
  service: name=haproxy state=started enabled=yes
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_service_nodes'] }}"
  tags:
    - provision_libvirt

#
# Configure httpd
#

- name: Use 8080 port in service node
  replace:
    path: /etc/httpd/conf/httpd.conf
    regexp: 'Listen 80'
    replace: 'Listen 8080'
    mode: '0644'
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_service_nodes'] }}"
  tags:
    - provision_libvirt

- name: Start and enable httpd service
  service: name=httpd state=started enabled=yes
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_service_nodes'] }}"
  tags:
    - provision_libvirt

#
# Include the install configuration
#

- name: "Render root keys in the service node"
  shell: |
    cd
    mkdir ~/.ssh
    ssh-keygen -t rsa -N "" -f .ssh/id_rsa <<< y
  register: render_service_keys
  changed_when: "render_service_keys.rc == 0"
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_service_nodes'] }}"
  tags:
    - provision_libvirt


- name: get root service machine public key
  command: cat /root/.ssh/id_rsa.pub
  register: public_key_service_content
  changed_when: "public_key_service_content.rc == 0"
  delegate_to: "{{ item }}"
  with_items: "{{ groups['k8s_service_nodes'] }}"
  tags:
    - provision_libvirt

- name: register the public key of the root service machine public key
  set_fact:
    kubeinit_provision_service_public_key={{ public_key_service_content.results }}
  tags:
    - provision_libvirt

#- name: Autoload kubeconfig
#  shell: |
#    echo "export KUBECONFIG=~/install_dir/auth/kubeconfig" >> ~/.bashrc
#  delegate_to: "{{ cluster_node }}"
#  with_items: "{{ groups['k8s_service_nodes'] }}"
#  loop_control:
#    loop_var: cluster_node
#  ignore_errors: yes
#  register: autoload
#  changed_when: "autoload.rc == 0"
#  tags:
#    - provision_libvirt

#
# Configure NFS
#

- name: Configure NFS
  delegate_to: "{{ groups['k8s_service_nodes'][0] }}"
  # delegate_facts: true
  import_role:
    name: ../../roles/kubeinit_nfs
    tasks_from: main
  tags:
    - provision_libvirt
