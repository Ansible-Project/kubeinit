---
# Copyright 2020 KubeInit.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


- name: get the public key we will use to access the service pod
  become: false
  delegate_to: localhost
  ansible.builtin.command: cat ~/.ssh/id_rsa.pub
  register: kubeinit_services_public_key
  changed_when: "kubeinit_services_public_key.rc == 0"

- name: Install buildah if required
  ansible.builtin.package:
    state: present
    name: "buildah"

- name: Create services folders
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    mode: '0700'
  with_items:
    - "{{ kubeinit_services_directory }}/.ssh"


- name: set the fact for the service pod public key
  ansible.builtin.set_fact:
    services_public_key: "{{ kubeinit_services_public_key.stdout }}"

- name: Create authorized_keys for service pod
  ansible.builtin.copy:
    content: |
      {{ services_public_key }}
      {{ kubeinit_provision_vms_public_key }}
    dest: "{{ kubeinit_services_directory }}/.ssh/authorized_keys"
    owner: "{{ kubeinit_service_user }}"
    group: "{{ kubeinit_service_user }}"
    mode: '0600'

- name: Run buildah to create container image
  ansible.builtin.shell: |
    set -o pipefail
    set -e
    buildah rm kubeinit-service || true
  register: services_buildah_rm_img
  changed_when: "services_buildah_rm_img.rc == 0"

- name: Run buildah to create container image
  ansible.builtin.command: buildah from --name kubeinit-service docker.io/centos:8
  register: services_buildah_create_img
  changed_when: "services_buildah_create_img.rc == 0"

- name: Run buildah to create container image
  ansible.builtin.command: buildah run kubeinit-service -- dnf update -q -y
  register: services_buildah_update_packages
  changed_when: "services_buildah_update_packages.rc == 0"

- name: Run buildah to create container image
  ansible.builtin.command: buildah run kubeinit-service -- dnf install -q -y openssh-server openssh-clients procps iproute python3 python3-pip jq
  register: services_buildah_install_packages
  changed_when: "services_buildah_install_packages.rc == 0"

- name: Run buildah to create container image
  ansible.builtin.command: buildah run kubeinit-service -- python3 -m pip install -q cryptography==3.3.2
  register: services_buildah_install_crypto
  changed_when: "services_buildah_install_crypto.rc == 0"

- name: Run buildah to create container image
  ansible.builtin.command: buildah run kubeinit-service -- bash -c "(cd /etc/ssh; ssh-keygen -A)"
  register: services_buildah_add_key
  changed_when: "services_buildah_add_key.rc == 0"

- name: Run buildah to create container image
  ansible.builtin.command: buildah run kubeinit-service -- rm -f /run/nologin
  register: services_buildah_rm_nologin
  changed_when: "services_buildah_rm_nologin.rc == 0"

- name: Run buildah to create container image
  ansible.builtin.command: buildah copy kubeinit-service "{{ kubeinit_services_directory }}/.ssh/authorized_keys" /root/.ssh/authorized_keys
  register: services_buildah_cp_keys
  changed_when: "services_buildah_cp_keys.rc == 0"

- name: Run buildah to create container image
  ansible.builtin.command: buildah config --cmd '' --entrypoint '["/usr/sbin/sshd", "-D", "-e"]' kubeinit-service
  register: services_buildah_entrypoint_create
  changed_when: "services_buildah_entrypoint_create.rc == 0"

- name: Run buildah to create the service container image
  ansible.builtin.command: buildah commit kubeinit-service kubeinit/kubeinit-service:latest
  register: services_buildah_create_service
  changed_when: "services_buildah_create_service.rc == 0"

- name: Create a podman container for ssh access to the service pod
  containers.podman.podman_container:
    name: "{{ kubeinit_services_container_name }}"
    image: kubeinit/kubeinit-service:latest
    pod: "{{ kubeinit_services_pod_name }}"
    cap_add:
      - "AUDIT_WRITE"
  register: services_podman_container_info

- name: Setting Podman facts about the container that will run the service pod
  ansible.builtin.set_fact:
    container_services_name: "{{ services_podman_container_info.container.Name }}"
    container_services_pidfile: "{{ services_podman_container_info.container.ConmonPidFile }}"

- name: Ensure user specific systemd instance are persistent
  ansible.builtin.command: |
    /usr/bin/loginctl enable-linger {{ kubeinit_service_user }}
  register: systemd_instance_persist
  changed_when: "systemd_instance_persist.rc == 0"

- name: Create systemd user directory
  ansible.builtin.file:
    path: "{{ kubeinit_service_user_dir }}/.config/systemd/user"
    state: directory
    owner: "{{ kubeinit_service_user }}"
    group: "{{ kubeinit_service_user }}"
    mode: '0775'

- name: Copy the podman systemd service file
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=Podman container-services.service
      [Service]
      Restart=on-failure
      ExecStart=/usr/bin/podman start {{ kubeinit_services_container_name }}
      ExecStop=/usr/bin/podman stop -t 10 {{ kubeinit_services_container_name }}
      KillMode=none
      Type=forking
      PIDFile={{ container_services_pidfile }}
      [Install]
      WantedBy=default.target
    dest: "{{ kubeinit_service_user_dir }}/.config/systemd/user/container-services.service"
    owner: "{{ kubeinit_service_user }}"
    group: "{{ kubeinit_service_user }}"
    mode: '0644'

- name: Reload systemd service
  ansible.builtin.systemd:
    daemon_reexec: yes
    scope: user
  environment:
    DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS|default('unix:path=/run/user/' +  ansible_effective_user_id|string + '/bus') }}"

- name: Enable container-services.service
  ansible.builtin.systemd:
    name: container-services
    enabled: yes
    scope: user
  environment:
    DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS|default('unix:path=/run/user/' +  ansible_effective_user_id|string + '/bus') }}"

- name: Start container-services.service
  ansible.builtin.systemd:
    name: container-services
    state: started
    scope: user
  environment:
    DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS|default('unix:path=/run/user/' +  ansible_effective_user_id|string + '/bus') }}"

# Confirm connectivity
- name: "make sure we can execute remote commands on {{ kubeinit_services_service_hostname }} before we continue"
  ansible.builtin.shell: |
    set -o pipefail
    ssh \
        -o ConnectTimeout=5 \
        -o BatchMode=yes \
        -o StrictHostKeyChecking=no \
        root@{{ kubeinit_services_service_address }} 'echo connected' || true
  args:
    executable: /bin/bash
  register: cmd_boot_ok_res
  changed_when: "cmd_boot_ok_res.rc == 0"
  retries: 30
  delay: 10
  until: "'connected' in cmd_boot_ok_res.stdout"

- name: wait for connection to {{ kubeinit_services_service_hostname }}
  ansible.builtin.wait_for_connection:
    connect_timeout: 20
    sleep: 5
    delay: 5
    timeout: 300
  delegate_to: "{{ kubeinit_services_service_address }}"
