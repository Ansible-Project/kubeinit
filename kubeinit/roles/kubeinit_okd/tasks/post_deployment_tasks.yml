---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Prepare services if needed
  ansible.builtin.include_role:
    name: kubeinit.kubeinit.kubeinit_services
    tasks_from: prepare_services.yml
    public: true
  vars:
    task_completed: "{{ hostvars['kubeinit-facts'] is defined }}"
  when: not task_completed

- block:
    - name: Check to see if we should stop here
      ansible.builtin.debug: msg="Stopping before '{{ kubeinit_stop_before_task }}'"
    - name: End play
      ansible.builtin.meta: end_play
  when: kubeinit_stop_before_task is defined and kubeinit_stop_before_task == 'task-post-deployment'

#
# Configure NFS
#
- name: Delegate to provision service node
  block:

    - name: Configure NFS
      ansible.builtin.include_role:
        name: kubeinit.kubeinit.kubeinit_nfs
        public: true
      when: "'nfs' in kubeinit_cluster_hostvars.services"

    - name: Add security context constraint for nfs provisioner
      ansible.builtin.shell: |
        cat << EOF > ~/nfs_scc.yaml
        apiVersion: security.openshift.io/v1
        kind: SecurityContextConstraints
        metadata:
          name: nfs-provisioner
        allowHostDirVolumePlugin: true
        allowHostIPC: false
        allowHostNetwork: false
        allowHostPID: false
        allowHostPorts: false
        allowPrivilegedContainer: false
        allowedCapabilities:
        - DAC_READ_SEARCH
        - SYS_RESOURCE
        defaultAddCapabilities: null
        fsGroup:
          type: MustRunAs
        priority: null
        readOnlyRootFilesystem: false
        requiredDropCapabilities:
        - KILL
        - MKNOD
        - SYS_CHROOT
        runAsUser:
          type: RunAsAny
        seLinuxContext:
          type: MustRunAs
        supplementalGroups:
          type: RunAsAny
        volumes:
        - configMap
        - downwardAPI
        - emptyDir
        - hostPath
        - nfs
        - persistentVolumeClaim
        - secret
        EOF
        export KUBECONFIG=~/.kube/config
        kubectl apply -f ~/nfs_scc.yaml --request-timeout=1800s
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"
      when: "'nfs' in kubeinit_cluster_hostvars.services"

    - name: Apply nfs security policy to nfs user
      ansible.builtin.shell: |
        export KUBECONFIG=~/.kube/config
        oc adm policy add-scc-to-user nfs-provisioner -z nfs-client-provisioner
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"
      when: "'nfs' in kubeinit_cluster_hostvars.services"

    - name: Wait for the image registry operator to start its components
      ansible.builtin.shell: |
        export KUBECONFIG=~/.kube/config
        oc get configs.imageregistry.operator.openshift.io cluster
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"
      retries: 60
      delay: 20
      until: _result.rc == 0
      when: "'nfs' in kubeinit_cluster_hostvars.services"

    - name: Patch imageregistry operator to claim storage
      ansible.builtin.shell: |
        # We patch the imageregistry operator to create a claim that managed-nfs-storage will satisfy
        export KUBECONFIG=~/.kube/config
        oc patch --request-timeout=1800s configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec": {"storage": {"pvc": {"claim": "" }}}}'
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"
      when: "'nfs' in kubeinit_cluster_hostvars.services"

    - name: Patch imageregistry operator to move to Managed state
      ansible.builtin.shell: |
        export KUBECONFIG=~/.kube/config
        oc patch --request-timeout=1800s configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec": {"managementState": "Managed" }}'
      args:
        executable: /bin/bash
      register: _result
      changed_when: "_result.rc == 0"
      when: "'nfs' in kubeinit_cluster_hostvars.services"

  vars:
    kubeinit_deployment_node_name: "{{ kubeinit_provision_service_node }}"
  delegate_to: "{{ kubeinit_deployment_node_name }}"

#
# Deploy KubeVirt
#
- block:
    - name: Deploy KubeVirt
      ansible.builtin.include_role:
        name: kubeinit.kubeinit.kubeinit_kubevirt
        public: yes
      when: not kubeinit_okd_openshift_deploy | default(False)
  vars:
    kubeinit_deployment_node_name: "{{ kubeinit_provision_service_node }}"
  delegate_to: "{{ kubeinit_deployment_node_name }}"

- name: Add task-post-deployment to tasks_completed
  ansible.builtin.add_host:
    name: "{{ kubeinit_cluster_facts_name }}"
    tasks_completed: "{{ kubeinit_cluster_hostvars.tasks_completed | union(['task-post-deployment']) }}"

- name: Update kubeinit_cluster_hostvars
  ansible.builtin.set_fact:
    kubeinit_cluster_hostvars: "{{ hostvars[kubeinit_cluster_facts_name] }}"

- block:
    - name: Check to see if we should stop here
      ansible.builtin.debug: msg="Stopping after '{{ kubeinit_stop_after_task }}'"
    - name: End play
      ansible.builtin.meta: end_play
  when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task in kubeinit_cluster_hostvars.tasks_completed
