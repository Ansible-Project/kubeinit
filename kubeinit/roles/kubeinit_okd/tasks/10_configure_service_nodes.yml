---
# Copyright kubeinit.com
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


- name: Delegate to the service node
  block:

    #
    # Include the install configuration
    #

    - name: Download okd installer
      ansible.builtin.get_url:
        url: "{{ kubeinit_okd_dependencies.installer }}"
        dest: ~/

    - name: Download okd client
      ansible.builtin.get_url:
        url: "{{ kubeinit_okd_dependencies.client }}"
        dest: ~/

    - name: Install okd client and installer
      ansible.builtin.shell: |
        set -o pipefail
        cd
        rm -rf install_dir
        mkdir install_dir
        for f in *.tar.gz; do tar -xvf "$f"; done
        mv kubectl oc openshift-install /usr/local/bin/
        oc version
        openshift-install version
      args:
        executable: /bin/bash
      register: install_client_and_installer
      changed_when: "install_client_and_installer.rc == 0"

    #
    # Configure local registry
    #

    - name: Render the required container images
      ansible.builtin.shell: |
        set -o pipefail

        {% if ( kubeinit_okd_openshift_deploy | default(False) ) %}
        URL="{{ kubeinit_okd_registry_release_url }}"
        {% else %}
        URL=$( curl -s "{{ kubeinit_okd_registry_release_url }}" \
           | jq -r '.assets[] | select(.name=="release.txt") | .browser_download_url' )
        {% endif %}

        curl -LO "$URL"
        cat release.txt | grep quay | grep -v "Pull From" | tr -s ' ' | cut -d ' ' -f 3 > ~/kubeinit_deployment_images.txt
      args:
        executable: /bin/bash
      register: render_images_list
      changed_when: "render_images_list.rc == 0"

    - name: Load images file
      ansible.builtin.slurp:
        src: ~/kubeinit_deployment_images.txt
      register: load_images

    - name: Set up variable with images list
      ansible.builtin.set_fact:
        kubeinit_registry_images: "{{ (load_images.content | b64decode).split('\n') | select() | list }}"

    - name: Mirror OKD remote registry to local
      ansible.builtin.shell: |
        set -eo pipefail
        oc adm \
            release mirror \
            --registry-config={{ kubeinit_registry_auth_file }} \
            --from={{ kubeinit_okd_registry }}/{{ kubeinit_okd_registry_organization }}/{{ kubeinit_okd_registry_repository }}:{{ kubeinit_okd_registry_release_tag }}{% if ( kubeinit_okd_openshift_deploy | default(False) ) %}-x86_64{% endif %} \
            --to={{ kubeinit_registry_uri }}/{{ kubeinit_okd_registry_repository }} \
            --to-release-image={{ kubeinit_registry_uri }}/{{ kubeinit_okd_registry_repository }}:{{ kubeinit_okd_registry_release_tag }} \
            2>&1 | tee mirror-output.txt
        oc adm \
            release extract \
            --registry-config={{ kubeinit_registry_auth_file }} \
            --command=openshift-install "{{ kubeinit_registry_uri }}/{{ kubeinit_okd_registry_repository }}:{{ kubeinit_okd_registry_release_tag }}"
        # This will override the current installer binary
        cp openshift-install /usr/local/bin/
      args:
        executable: /bin/bash
      register: mirror_registry
      changed_when: "mirror_registry.rc == 0"
      when: kubeinit_registry_enabled|bool

    - name: Render the cluster template
      ansible.builtin.template:
        src: "install-config.yaml.j2"
        dest: "~/install_dir/install-config.yaml"
        mode: '0644'

    - name: Backup the install config file
      ansible.builtin.shell: |
        cp ~/install_dir/install-config.yaml ~/install-config.yaml
      register: backup_install_config
      changed_when: "backup_install_config.rc == 0"

    - name: Render the bootstrap details
      ansible.builtin.shell: |
        openshift-install create manifests --dir=install_dir/
      register: render_bootstrap_details
      changed_when: "render_bootstrap_details.rc == 0"

    - name: Enable master schedulable if there are no worker nodes
      ansible.builtin.shell: |
        set -o pipefail
        cd
        yaml_file="install_dir/manifests/cluster-scheduler-02-config.yml"
        key="mastersSchedulable"
        new_value="true"
        sed -r "s/^(\s*${key}\s*:\s*).*/\1${new_value}/" -i "$yaml_file"
      args:
        executable: /bin/bash
      register: enable_masters_sched
      changed_when: "enable_masters_sched.rc == 0"
      when: groups['all_compute_nodes'] | list | length == 0

    - name: Disable master schedulable if there is at least one worker node
      ansible.builtin.shell: |
        set -o pipefail
        cd
        yaml_file="install_dir/manifests/cluster-scheduler-02-config.yml"
        key="mastersSchedulable"
        new_value="false"
        sed -r "s/^(\s*${key}\s*:\s*).*/\1${new_value}/" -i "$yaml_file"
      args:
        executable: /bin/bash
      register: disable_masters_sched
      changed_when: "disable_masters_sched.rc == 0"
      when: groups['all_compute_nodes'] | list | length > 0

    - name: Create directory for apache
      ansible.builtin.file:
        path: "/var/kubeinit/html/okd4"
        state: directory
        mode: 0775
        recurse: yes

    - name: Render ignition files
      ansible.builtin.shell: |
        # We backup first the manifests
        tar -czvf install_manifests_backup.tar.gz ~/install_dir/
        openshift-install create ignition-configs --dir=install_dir/
        cp -R install_dir/* "/var/kubeinit/html/okd4/"
      register: render_ignition_files
      changed_when: "render_ignition_files.rc == 0"

    - name: Download CoreOS images
      ansible.builtin.include_role:
        name: ../../roles/kubeinit_libvirt
        tasks_from: download_coreos_images.yml
        public: true

    - name: Apply permissions to the apache folder
      ansible.builtin.file:
        path: "/var/kubeinit/html/"
        state: directory
        recurse: yes
        mode: '0755'

    - name: Create kube directory
      ansible.builtin.file:
        path: ~/.kube
        state: directory
        mode: '0644'

    - name: Autoload kubeconfig
      ansible.builtin.shell: |
        echo "export KUBECONFIG=~/install_dir/auth/kubeconfig" >> ~/.bashrc
      ignore_errors: yes
      register: autoload
      changed_when: "autoload.rc == 0"

  delegate_to: "{{ hostvars[kubeinit_deployment_node_name].ansible_host }}"
