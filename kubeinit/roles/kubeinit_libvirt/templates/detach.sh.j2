#!/bin/bash
set -euo pipefail

#
# Enslave a physical interface to the external bridge
#

# The name of the bridge that will enslave the external access interface.
brname="{{ kubeinit_libvirt_external_service_interface.attached }}"
# To choose if we configure the bridge
# with DHCP or static IP even if the interface
# was using DHCP
use_dhcp=0

iface=$(ip route get "8.8.8.8" | grep -Po '(?<=(dev )).*(?= src| proto)')
gw=$(ip route get "8.8.8.8" | grep -Po '(?<=(via )).*(?= dev)')
addr=$(nmcli -g IP4.ADDRESS device show "${iface}")
conn=$(nmcli -g GENERAL.CONNECTION device show "${iface}")
# mac=$(nmcli -g GENERAL.HWADDR device show "${iface}")
dns=$(nmcli -g IP4.DNS con show "$conn" | tr '|' ' ')
method=$(nmcli -g IPV4.METHOD con show "$conn")


echo "This script will enslave the external interface ${iface} to ${brname}"
echo "MAKE SURE YOU EXECUTE THIS LIKE"
echo "######"
echo "Single node deployment with Linux bridge:"
echo "nohup ./detach.sh YesImReallySure &"
echo "or"
echo "Multi node deployment with OVN:"
echo "nohup ./detach.sh YesImReallySure OVN &"
echo "######"
echo "Otherwise you might end up by dropping the interface IP"
echo "and blocking the access to this node"

if [ "$1" == "YesImReallySure" ]; then
    echo "IP: ${addr}"
    echo "GW: ${gw}"
    echo "Method: ${method}"
    echo "DNS: ${dns}"
    # This can be auto or manual
    if [ "${iface}" = "${brname}" ]; then
        echo "We are already using the interface, do nothing"
    else
        echo "net.ipv6.conf.all.disable_ipv6 = 1" > /etc/sysctl.d/70-ipv6.conf
        echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.d/70-ipv6.conf
        sysctl --load /etc/sysctl.d/70-ipv6.conf
        if [ "$2" == "OVN" ]; then
            echo "Install dependencies"

            if grep -qi "CentOS" /etc/redhat-release; then
                dnf install -y centos-release-nfv-openvswitch
                dnf install -y NetworkManager-ovs openvswitch2.13
            fi

            if grep -qi "Fedora" /etc/redhat-release; then
                dnf install -y NetworkManager-ovs openvswitch
            fi

            if grep -qi "Ubuntu" /etc/os-release; then
                echo "OS not supported yet"
                exit 1
            fi

            if grep -qi "Debian" /etc/os-release; then
                echo "OS not supported yet"
                exit 1
            fi

            systemctl enable --now openvswitch
            systemctl restart NetworkManager
            echo "Enslaving the physical interface with an OVS bridge"
            nmcli con add type ovs-bridge conn.interface "${brname}" con-name "${brname}"
            nmcli con add type ovs-port conn.interface port-"${brname}" master "${brname}" con-name "${brname}"-port
            nmcli con add type ovs-interface slave-type ovs-port conn.interface "${brname}" master "${brname}"-port con-name "${brname}"-int

            nmcli con add type ovs-port conn.interface ovs-port-eth master "${brname}" con-name ovs-port-eth
            nmcli con add type ethernet conn.interface "${iface}" master ovs-port-eth con-name ovs-port-eth-int

            nmcli con down "${conn}" ; \
            nmcli con up ovs-port-eth-int ; \

            nmcli con modify "${conn}" ipv4.method disabled ipv6.method disabled

            if [ "${method}" = "auto" ]; then
                echo "Releasing interfaces"
                dhclient -r "${iface}"
            fi

            if [ "${method}" = "auto" ] && [ "${use_dhcp}" -eq 1 ]; then
                echo "Setting IP by DHCP"
                nmcli con up "${brname}"-int
                dhclient "${brname}"-int
            else
                echo "Setting static IP"
                nmcli con modify "${brname}"-int ipv4.method disabled ipv6.method disabled
                nmcli con modify "${brname}"-int ipv4.method manual ipv4.address "${addr}" ipv4.gateway "${gw}" ipv4.dns "${dns}"
                nmcli con up "${brname}"-int
            fi
        else
            echo "Enslaving the physical interface without OVN"
            echo "Creating bridge"
            nmcli con add ifname "${brname}" type bridge con-name "${brname}"
            echo "Enslaving the external access interface to the bridge"
            nmcli con add type bridge-slave ifname "${iface}" master "${brname}"
            echo "Disabling stp in the bridge"
            nmcli con modify "${brname}" bridge.stp no
            echo "Shutting down the external connection"
            nmcli con down "$conn"
            echo "Starting the bridge"
            nmcli con up "${brname}"
            echo "Show bridge info"
            ip a s "${brname}"
            echo "Flushing the interface current IP"
            ip addr add 0.0.0.0 dev "${iface}" && \
            ip addr flush dev "${iface}"

            if [ "${method}" = "auto" ] && [ "${use_dhcp}" -eq 1 ]; then
                echo "Setting IP by DHCP"
                dhclient -r "${iface}" && \
                dhclient "${brname}"
            else
                echo "Setting static IP"
                ip addr add "${addr}" dev "${brname}" && \
                ip link set "${brname}" up
            fi
        fi
    fi
    nmcli connection reload
    echo "net.ipv6.conf.all.disable_ipv6 = 1" > /etc/sysctl.d/70-ipv6.conf
    echo "net.ipv6.conf.default.disable_ipv6 = 1" >> /etc/sysctl.d/70-ipv6.conf
    sysctl --load /etc/sysctl.d/70-ipv6.conf
fi
