---
# Copyright kubeinit.com
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

##
## OVN hypervisors setup.
##

- name: Set up the OVN network details
  block:

    - name: configure OVN in the first Hypervisor
      ansible.builtin.shell: |
        CENTRAL_IP={{ hostvars[groups['hypervisor_nodes'][0]]['ansible_default_ipv4']['address'] }} # This is the IP of the first HV
        LOCAL_IP={{ hostvars[kubeinit_deployment_node_name]['ansible_default_ipv4']['address'] }} # This is the IP of the current HV
        ENCAP_TYPE={{ kubeinit_libvirt_ovn_encapsulation }}
        sudo ovs-vsctl set Open_vSwitch . \
            external_ids:ovn-remote="tcp:$CENTRAL_IP:{{ kubeinit_libvirt_ovn_southbound_port }}" \
            external_ids:ovn-nb="tcp:$CENTRAL_IP:{{ kubeinit_libvirt_ovn_northbound_port }}" \
            external_ids:ovn-encap-ip=$LOCAL_IP \
            external_ids:ovn-encap-type="$ENCAP_TYPE" \
            external_ids:system-id="{{ kubeinit_deployment_node_name }}" #\
            # external-ids:ovn-bridge-mappings=kubeinit-ovn-net:kimgtbr0
            # https://access.redhat.com/documentation/en-us/red_hat_openstack_platform/13/html/networking_guide/bridge-mappings

        # Below two commands only for master. For SSL, other steps are required.
        sudo ovn-nbctl set-connection ptcp:{{ kubeinit_libvirt_ovn_northbound_port }}
        sudo ovn-sbctl set-connection ptcp:{{ kubeinit_libvirt_ovn_southbound_port }}
      when: >
        groups['hypervisor_nodes'][0] in kubeinit_deployment_node_name

    - name: configure OVN in the rest of the Hypervisors
      ansible.builtin.shell: |
        CENTRAL_IP={{ hostvars[groups['hypervisor_nodes'][0]]['ansible_default_ipv4']['address'] }} # This is the IP of the first HV
        LOCAL_IP={{ hostvars[kubeinit_deployment_node_name]['ansible_default_ipv4']['address'] }} # This is the IP of the current HV
        ENCAP_TYPE={{ kubeinit_libvirt_ovn_encapsulation }}
        sudo ovs-vsctl set Open_vSwitch . \
            external_ids:ovn-remote="tcp:$CENTRAL_IP:{{ kubeinit_libvirt_ovn_southbound_port }}" \
            external_ids:ovn-nb="tcp:$CENTRAL_IP:{{ kubeinit_libvirt_ovn_northbound_port }}" \
            external_ids:ovn-encap-ip=$LOCAL_IP \
            external_ids:ovn-encap-type="$ENCAP_TYPE" \
            external_ids:system-id="{{ kubeinit_deployment_node_name }}" #\
            # external-ids:ovn-bridge-mappings=kubeinit-ovn-net:kimgtbr0
            # https://access.redhat.com/documentation/en-us/red_hat_openstack_platform/13/html/networking_guide/bridge-mappings

      when: >
        kubeinit_deployment_node_name in groups['hypervisor_nodes'][1:] and
        groups['hypervisor_nodes'] | length > 1

    - name: We configure an interface to provide access to the internet
      ansible.builtin.shell: |
        # Get the gateway interface
        # This breaks the node connection
        #iface=$(route | grep '^default' | grep -o '[^ ]*$')
        #ovs-vsctl set open . external-ids:ovn-bridge-mappings=provider:br-provider
        #ovs-vsctl --may-exist add-br br-provider
        #ovs-vsctl --may-exist add-port br-provider $iface

    - name: Let's create a bridge to host the VMs
      ansible.builtin.shell: |
        # On each HV lets create a virtual bridge
        # This bridge will be used when we create the VMs
        # we will use br-int so no removing
        # ovs-vsctl del-br br-int || True
        ovs-vsctl --may-exist add-br br-int
        # This is executed in every Hypervisor, that is why when is empty
        echo "asdf"

    - name: remove and create the cluster switch if exists
      ansible.builtin.shell: |
        ovn-nbctl ls-del {{ kubeinit_libvirt_ovn_switch }} || True
        # Create a logical switch
        ovn-nbctl ls-add {{ kubeinit_libvirt_ovn_switch }}
      when: >
        groups['hypervisor_nodes'][0] in kubeinit_deployment_node_name
