---
# Copyright kubeinit.com
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

##
## OVN post deployment configuration steps.
##

- name: Post set up the OVN network details
  block:
    - name: Let's create a bridge to host the VMs
      ansible.builtin.shell: |
        # On each HV lets create a virtual bridge br-int
        # This bridge will be used when we create the VMs
        # we will use br-int so no need to removing it before
        ovs-vsctl --may-exist add-br br-int
        # This is executed in every Hypervisor

    #
    # We create the OVN switch that will be binded to each chassis (hypervisor)
    # In this switch we will create a port per guest
    #
    - name: remove and create the cluster switch if exists
      ansible.builtin.shell: |
        #
        # Create a logical switch
        #
        ovn-nbctl ls-add sw0
        {% if kubeinit_libvirt_external_service_interface_enabled %}
        ovn-nbctl ls-add sw1
        {% endif %}
      when: >
        groups['hypervisor_nodes'][0] in kubeinit_deployment_node_name

    - name: create the DHCP options
      ansible.builtin.shell: |
        #
        # Create DHCP options
        #
        Dhcp_opts=$(ovn-nbctl create DHCP_Options cidr={{ kubeinit_inventory_network_net }}/{{ kubeinit_inventory_network_cidr }} \
            options=" \
                    \"server_id\"=\"{{ kubeinit_inventory_network_gateway }}\" \
                    \"server_mac\"=\"00:00:00:65:77:09\" \
                    \"lease_time\"=\"3600\" \
                    \"router\"=\"{{ kubeinit_inventory_network_gateway }}\" \
                    \"dns_server\"=\"{{ kubeinit_inventory_cluster_dns_server }}\" \
                    \"mtu\"=\"1442\" \
                    ")
        echo $Dhcp_opts
      register: dhcp_options
      changed_when: "dhcp_options.rc == 0"
      when: >
        groups['hypervisor_nodes'][0] in kubeinit_deployment_node_name

    - name: register the dhcp options uuid
      ansible.builtin.set_fact: kubeinit_provision_dhcp_options={{ dhcp_options.stdout }}
      when: >
        groups['hypervisor_nodes'][0] in kubeinit_deployment_node_name

    - name: Display the registered dhcp options
      ansible.builtin.debug:
        var: kubeinit_provision_dhcp_options
      when: >
        groups['hypervisor_nodes'][0] in kubeinit_deployment_node_name

    - name: create OVS/OVN bindings for the VMs ports
      ansible.builtin.shell: |
        #
        # We create an OVN port using the interface ID and the mac address of the VM
        #
        ovn-nbctl --db=tcp:{{ hostvars[groups['hypervisor_nodes'][0]]['ansible_default_ipv4']['address'] }}:{{ kubeinit_libvirt_ovn_northbound_port }} \
            lsp-add sw0 {{ hostvars[item].interfaceid }}

        #
        # The port name is the interface id of the VM, now we assign the mac address of the VM to the port
        #
        ovn-nbctl --db=tcp:{{ hostvars[groups['hypervisor_nodes'][0]]['ansible_default_ipv4']['address'] }}:{{ kubeinit_libvirt_ovn_northbound_port }} \
            lsp-set-addresses {{ hostvars[item].interfaceid }} "{{ hostvars[item].mac }} {{ hostvars[item].ansible_host }}"

        ovn-nbctl --db=tcp:{{ hostvars[groups['hypervisor_nodes'][0]]['ansible_default_ipv4']['address'] }}:{{ kubeinit_libvirt_ovn_northbound_port }} \
            lsp-set-port-security {{ hostvars[item].interfaceid }} "{{ hostvars[item].mac }} {{ hostvars[item].ansible_host }}"

        ovn-nbctl --db=tcp:{{ hostvars[groups['hypervisor_nodes'][0]]['ansible_default_ipv4']['address'] }}:{{ kubeinit_libvirt_ovn_northbound_port }} \
            lsp-set-dhcpv4-options {{ hostvars[item].interfaceid }} {{ kubeinit_provision_dhcp_options }}

        {% if kubeinit_libvirt_external_service_interface_enabled and 'service' in item %}
        ovn-nbctl --db=tcp:{{ hostvars[groups['hypervisor_nodes'][0]]['ansible_default_ipv4']['address'] }}:{{ kubeinit_libvirt_ovn_northbound_port }} \
            lsp-add sw1 {{ kubeinit_inventory_network_bridge_external_interfaceid }}

        ovn-nbctl --db=tcp:{{ hostvars[groups['hypervisor_nodes'][0]]['ansible_default_ipv4']['address'] }}:{{ kubeinit_libvirt_ovn_northbound_port }} \
            lsp-set-addresses {{ kubeinit_inventory_network_bridge_external_interfaceid }} "{{ kubeinit_libvirt_external_service_interface.mac }} {{ kubeinit_libvirt_external_service_interface.ip }}"

        ovn-nbctl --db=tcp:{{ hostvars[groups['hypervisor_nodes'][0]]['ansible_default_ipv4']['address'] }}:{{ kubeinit_libvirt_ovn_northbound_port }} \
            lsp-set-port-security {{ kubeinit_inventory_network_bridge_external_interfaceid }} "{{ kubeinit_libvirt_external_service_interface.mac }} {{ kubeinit_libvirt_external_service_interface.ip }}"
        {% endif %}

      with_items:
        - "{{ groups['all'] | map('regex_search','^((?!hypervisor).)*$') | select('string') | list }}"
      # We run this bucle in each hypervisor, so, we execute these tasks
      # when the item (each guest) target is equal to the hypervisor where we
      # execute the tasks "The VMs in each host"
      when: kubeinit_deployment_node_name in hostvars[item].target

    - name: Configuring a router connected to the guests switch
      ansible.builtin.shell: |
        #
        # Create a logical router to connect the VMs switch
        #
        ovn-nbctl lr-add lr0
        ovn-nbctl lrp-add lr0 lr0-sw0 00:00:00:65:77:09 {{ kubeinit_inventory_network_gateway }}/{{ kubeinit_inventory_network_cidr }}
        ovn-nbctl lsp-add sw0 sw0-lr0
        ovn-nbctl lsp-set-type sw0-lr0 router
        ovn-nbctl lsp-set-addresses sw0-lr0 router
        ovn-nbctl lsp-set-options sw0-lr0 router-port=lr0-sw0
        #
        # We create the external access switch
        #
        ovn-nbctl ls-add public
        ovn-nbctl lrp-add lr0 lr0-public 00:00:20:20:12:13 172.16.0.1/24
        ovn-nbctl lsp-add public public-lr0
        ovn-nbctl lsp-set-type public-lr0 router
        ovn-nbctl lsp-set-addresses public-lr0 router
        ovn-nbctl lsp-set-options public-lr0 router-port=lr0-public
        #
        # Create a localnet port
        #
        ovn-nbctl lsp-add public public-ln
        ovn-nbctl lsp-set-type public-ln localnet
        ovn-nbctl lsp-set-addresses public-ln unknown
        ovn-nbctl lsp-set-options public-ln network_name=provider
        #
        # We add a bridge mapping from br-ex called provider
        #
        ovs-vsctl set Open_vSwitch . external-ids:ovn-bridge-mappings=provider:br-ex
        #
        # Configuring the chassis gateway to the first hypervisor
        #
        ovn-nbctl lrp-set-gateway-chassis lr0-public hypervisor-01
        ovn-nbctl \
          --id=@gc0 create Gateway_Chassis name=lr0-public chassis_name=hypervisor-01 priority=20 -- \
          set Logical_Router_Port lr0-public 'gateway_chassis=[@gc0]'
        ovn-nbctl set logical_router_port lr0-public options:redirect-chassis=hypervisor-01
        #
        # Create an ovs br-ex bridge to connect to the host
        #
        ovs-vsctl --may-exist add-br br-ex
        ip addr add 172.16.0.254/24 dev br-ex
        ip link set br-ex up
        #
        # Create a localnet port for the external interface
        #
        {% if kubeinit_libvirt_external_service_interface_enabled %}
        ovn-nbctl lsp-add sw1 sw1-ln
        ovn-nbctl lsp-set-type sw1-ln localnet
        ovn-nbctl lsp-set-addresses sw1-ln unknown
        #
        # The following rules breaks the network but the sw1 connection needs to be
        # connected to the host in some way
        #
        # ovn-nbctl lsp-set-options sw1-ln network_name=externalserv
        # ovs-vsctl set Open_vSwitch . external-ids:ovn-bridge-mappings=externalserv:kiextbr0
        # ovs-vsctl --may-exist add-br kiextbr0
        # ip link set kiextbr0 up
        {% endif %}
        #
        # Routes
        #
        # Connectivity from the host to the guest machines
        ip route add {{ kubeinit_inventory_network_net }}/{{ kubeinit_inventory_network_cidr }} via 172.16.0.1 dev br-ex
        # Connectivity to external/additional networks
        ovn-nbctl lr-route-add lr0 0.0.0.0/0 172.16.0.254
        #
        # Disable rp_filter
        #
        sysctl net.ipv4.conf.all.rp_filter=2
      when: >
        groups['hypervisor_nodes'][0] in kubeinit_deployment_node_name

    - name: Configuring NAT when not using the external bridge interface
      ansible.builtin.shell: |
        #
        # NAT from the external interface
        #
        # Get the external interface name
        iface=$(ip route get "8.8.8.8" | grep -Po '(?<=(dev )).*(?= src| proto)')
        #
        iptables -t nat -A POSTROUTING -s {{ kubeinit_inventory_network_net }}/{{ kubeinit_inventory_network_cidr }} -o $iface -j MASQUERADE
        #
        iptables -A FORWARD -i $iface -j ACCEPT
        iptables -A FORWARD -i br-ex -j ACCEPT
        iptables -A FORWARD -o $iface -j ACCEPT
        iptables -A FORWARD -o br-ex -j ACCEPT
        #
        iptables -A FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
        #
        iptables -P FORWARD ACCEPT
        iptables -P INPUT ACCEPT
        iptables -P OUTPUT ACCEPT
      when: >
        groups['hypervisor_nodes'][0] in kubeinit_deployment_node_name

    # - name: Create the detach interface script
    #   ansible.builtin.template:
    #     src: "../../roles/kubeinit_libvirt/templates/detach.sh"
    #     dest: "~/detach.sh"
    #     mode: "0755"
    #   when: >
    #     groups['hypervisor_nodes'][0] in kubeinit_deployment_node_name
    #
    # - name: Detach the phisical network interface and attach it to the OVN external bridge
    #   ansible.builtin.command: ~/detach.sh
    #   async: 45
    #   poll: 0
    #   when: >
    #     groups['hypervisor_nodes'][0] in kubeinit_deployment_node_name

  delegate_to: "{{ kubeinit_deployment_node_name }}"
  tags:
    - provision_libvirt
    # When the deployment finishes, it shuold be possible to see the available chassis and ports by running:
    # ovn-nbctl show
    # ovn-sbctl show
    # ovs-vsctl show
    # ovs-vsctl list interface veth0-wo02
