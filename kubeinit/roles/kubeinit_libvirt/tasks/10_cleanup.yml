---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

##
## Clean networks
##
- name: Destroy deployment networks
  community.libvirt.virt_net:
    command: destroy
    name: "{{ cluster_net.name }}"
  with_items:
    - "{{ groups['all_hosts'] | product(kubeinit_libvirt_cluster_nets) | list }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item[0] }}"
    cluster_net: "{{ cluster_role_item[1] }}"
  delegate_to: "{{ kubeinit_deployment_node_name }}"
  when: cluster_net.name in hostvars[kubeinit_deployment_node_name].libvirt_nets and kubeinit_libvirt_destroy_nets|bool and not kubeinit_libvirt_multicluster_keep_predefined_networks

- name: Undefine deployment networks
  community.libvirt.virt_net:
    command: undefine
    name: "{{ cluster_net.name }}"
  with_items:
    - "{{ groups['all_hosts'] | product(kubeinit_libvirt_cluster_nets) | list }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item[0] }}"
    cluster_net: "{{ cluster_role_item[1] }}"
  delegate_to: "{{ kubeinit_deployment_node_name }}"
  when: cluster_net.name in hostvars[kubeinit_deployment_node_name].libvirt_nets and kubeinit_libvirt_destroy_nets|bool and not kubeinit_libvirt_multicluster_keep_predefined_networks

- name: Remove the deployment networks
  community.libvirt.virt_net:
    state: absent
    name: "{{ cluster_net.name }}"
  with_items:
    - "{{ groups['all_hosts'] | product(kubeinit_libvirt_cluster_nets) | list }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item[0] }}"
    cluster_net: "{{ cluster_role_item[1] }}"
  delegate_to: "{{ kubeinit_deployment_node_name }}"
  when: cluster_net.name in hostvars[kubeinit_deployment_node_name].libvirt_nets and kubeinit_libvirt_destroy_nets|bool and not kubeinit_libvirt_multicluster_keep_predefined_networks

##
## Clean VMs
##
- name: Generate a list of vm guest names to match
  ansible.builtin.set_fact:
    matching_vm_guest_names: "{{ (matching_vm_guest_names | default([])) | union([hostvars[item].guest_name]) }}"
  loop: "{{ groups['all_guest_vms'] }}"

- name: Destroy vms
  community.libvirt.virt:
    name: "{{ cluster_vm }}"
    state: destroyed
  loop: "{{ kubeinit_cluster_hostvars.running_vms }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item[0] }}"
    cluster_vm: "{{ cluster_role_item[1] }}"
  delegate_to: "{{ kubeinit_deployment_node_name }}"
  when: cluster_vm in matching_vm_guest_names or kubeinit_libvirt_destroy_all_guests

- name: Undefine vms
  community.libvirt.virt:
    name: "{{ cluster_vm }}"
    command: undefine
  loop: "{{ kubeinit_cluster_hostvars.running_vms }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item[0] }}"
    cluster_vm: "{{ cluster_role_item[1] }}"
  delegate_to: "{{ kubeinit_deployment_node_name }}"
  when: cluster_vm in matching_vm_guest_names or kubeinit_libvirt_destroy_all_guests

- name: Remove VMs storage
  ansible.builtin.file:
    state: absent
    path: "{{ kubeinit_libvirt_target_image_dir }}/{{ cluster_vm }}.qcow2"
  loop: "{{ kubeinit_cluster_hostvars.running_vms }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item[0] }}"
    cluster_vm: "{{ cluster_role_item[1] }}"
  delegate_to: "{{ kubeinit_deployment_node_name }}"
  when: cluster_vm in matching_vm_guest_names or kubeinit_libvirt_destroy_all_guests

##
## Clean folders
##
- name: Clean directories for config files per node
  ansible.builtin.file:
    state: absent
    path: "{{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ guest_vm }}/"
  with_items:
    - "{{ groups['all_hosts'] | product(groups['all_guest_vms']) | list }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item[0] }}"
    guest_vm: "{{ hostvars[cluster_role_item[1]].guest_name }}"
  delegate_to: "{{ kubeinit_deployment_node_name }}"

##
## Clean keys
##
- name: Reset ssh keys in hypervisor
  ansible.builtin.known_hosts:
    name: "{{ node_alias }}"
    state: absent
  with_items:
    - "{{ groups['all_hosts'] | product(kubeinit_cluster_hostvars.node_aliases | flatten | unique) | list }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item[0] }}"
    node_alias: "{{ cluster_role_item[1] }}"
  delegate_to: "{{ kubeinit_deployment_node_name }}"
