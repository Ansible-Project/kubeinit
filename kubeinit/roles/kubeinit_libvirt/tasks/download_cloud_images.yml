---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Prepare environment if not prepared
  ansible.builtin.include_role:
    name: kubeinit.kubeinit.kubeinit_prepare
    public: true
  vars:
    task_completed: "{{ hostvars['kubeinit-facts'] is defined }}"
  when: not task_completed

- block:
    - name: Check to see if we should stop here
      ansible.builtin.debug: msg="Stopping before '{{ kubeinit_stop_before_task }}'"
    - name: End play
      ansible.builtin.meta: end_play
  when: kubeinit_stop_before_task is defined and kubeinit_stop_before_task == 'task-download-images'

#
# Download distribution specific images
#
- name: Create tuples for hosts and guest vms
  ansible.builtin.set_fact:
    all_hosts_guest_vms: "{{ (all_hosts_guest_vms | default([])) + ([item[0]] | product([item[1]])) }}"
  loop: "{{ groups['all_hosts'] | product(groups['all_guest_vms']) }}"
  when: hostvars[item[1]].target in item[0]

- name: Create new directories for config files per node
  ansible.builtin.file:
    path: "{{ kubeinit_libvirt_hypervisor_tmp_dir }}/{{ guest_vm }}"
    state: directory
    mode: 0775
    recurse: yes
  loop: "{{ all_hosts_guest_vms }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item[0] }}"
    guest_vm: "{{ hostvars[cluster_role_item[1]].guest_name }}"
  delegate_to: "{{ kubeinit_deployment_node_name }}"

- name: Create tuples for hosts and guest os
  ansible.builtin.set_fact:
    all_hosts_guest_os: "{{ (all_hosts_guest_os | default([])) + ([item[0]] | product([hostvars[item[1]].os])) }}"
  loop: "{{ groups['all_hosts'] | product(groups['all_guest_vms']) }}"
  when: hostvars[item[1]].target in item[0] and kubeinit_libvirt_source_images[hostvars[item[1]].os].image

- name: Remove duplicates
  ansible.builtin.set_fact:
    all_hosts_guest_os: "{{ (all_hosts_guest_os | default([])) | unique }}"

- name: Download cloud images
  ansible.builtin.get_url:
    validate_certs: False
    use_proxy: True
    url: "{{ kubeinit_libvirt_source_images[guest_os].uri }}{{ kubeinit_libvirt_source_images[guest_os].image }}"
    dest: "{{ kubeinit_libvirt_target_image_dir }}/{{ kubeinit_libvirt_source_images[guest_os].image }}"
    force: no
    mode: '0666'
    owner: "{{ hostvars[kubeinit_deployment_node_name].libvirt_qemu_user }}"
  loop: "{{ all_hosts_guest_os }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item[0] }}"
    guest_os: "{{ cluster_role_item[1] }}"
  delegate_to: "{{ kubeinit_deployment_node_name }}"

- name: Update packages in cloud images
  ansible.builtin.command: |
    virt-customize -a {{ kubeinit_libvirt_target_image_dir }}/{{ kubeinit_libvirt_source_images[guest_os].image }} {% if guest_os == 'ubuntu' %}--run-command 'env DEBIAN_FRONTEND=noninteractive apt-get -y --allow-remove-essential purge shim-signed'{% endif %} --update
  loop: "{{ all_hosts_guest_os }}"
  loop_control:
    loop_var: cluster_role_item
  vars:
    kubeinit_deployment_node_name: "{{ cluster_role_item[0] }}"
    guest_os: "{{ cluster_role_item[1] }}"
  register: update_cloud_image_packages
  changed_when: "update_cloud_image_packages.rc == 0"
  delegate_to: "{{ kubeinit_deployment_node_name }}"

- name: Add task-download-images to tasks_completed
  ansible.builtin.add_host:
    name: "{{ kubeinit_cluster_facts_name }}"
    tasks_completed: "{{ kubeinit_cluster_hostvars.tasks_completed | union(['task-download-images']) }}"

- name: Update kubeinit_cluster_hostvars
  ansible.builtin.set_fact:
    kubeinit_cluster_hostvars: "{{ hostvars[kubeinit_cluster_facts_name] }}"

- block:
    - name: Check to see if we should stop here
      ansible.builtin.debug: msg="Stopping after '{{ kubeinit_stop_after_task }}'"
    - name: End play
      ansible.builtin.meta: end_play
  when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task in kubeinit_cluster_hostvars.tasks_completed
