---
# Copyright 2020 KubeInit.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


# "kubeinit_haproxy" will search for and load any operating system variable file

# found within the "vars/" path. If no OS files are found the task will skip.
- name: Gather variables for each operating system
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - skip: true
      files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_version.split('.')[0] }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
  tags:
    - always

- name: Create HAProxy folders
  ansible.builtin.file:
    path: "{{ item | safe | trim }}"
    state: directory
    recurse: yes
    mode: '0755'
  with_items: "{{ kubeinit_haproxy_directories }}"

- name: Create HAProxy config file
  ansible.builtin.template:
    src: "haproxy.cfg.j2"
    dest: "{{ kubeinit_haproxy_config_file }}"
    mode: '0644'

- name: Install podman if required
  ansible.builtin.package:
    state: present
    name: "podman"

- name: Podman login to docker.io
  ansible.builtin.command: >
    podman login docker.io --username {{ kubeinit_common_docker_username }} --password-stdin
  args:
    executable: /bin/bash
    stdin: "{{ kubeinit_common_docker_password }}"
  register: podman_login
  changed_when: "podman_login.rc == 0"
  when: |
    kubeinit_common_docker_username is defined and
    kubeinit_common_docker_password is defined and
    kubeinit_common_docker_username and
    kubeinit_common_docker_password

- name: Create a podman container to serve the haproxy
  containers.podman.podman_container:
    name: "{{ kubeinit_haproxy_pod_name }}"
    image: docker.io/library/haproxy:2.3
    state: stopped
    network: host
    volumes:
      - "{{ kubeinit_haproxy_config_file }}:/usr/local/etc/haproxy/haproxy.cfg"
      - "/var/lib/haproxy:/var/lib/haproxy:Z"
  register: haproxy_podman_container_info

- name: Setting Podman facts about the container that will run the haproxy
  ansible.builtin.set_fact:
    container_haproxy_name: "{{ haproxy_podman_container_info.container.Name }}"
    container_haproxy_pidfile: "{{ haproxy_podman_container_info.container.ConmonPidFile }}"

- name: Ensure user specific systemd instance are persistent
  ansible.builtin.command: |
    /usr/bin/loginctl enable-linger {{ ansible_user }}
  register: systemd_instance_persist
  changed_when: "systemd_instance_persist.rc == 0"

- name: Create systemd user directory
  ansible.builtin.file:
    path: "{{ ansible_user_dir }}/.config/systemd/user"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0775'

- name: Copy the podman systemd service file
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=Podman container-haproxy.service
      [Service]
      Restart=on-failure
      ExecStart=/usr/bin/podman start {{ container_haproxy_name }}
      ExecStop=/usr/bin/podman stop -t 10 {{ container_haproxy_name }}
      KillMode=none
      Type=forking
      PIDFile={{ container_haproxy_pidfile }}
      [Install]
      WantedBy=default.target
    dest: "{{ ansible_user_dir }}/.config/systemd/user/container-haproxy.service"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'

- name: Reload systemd service
  ansible.builtin.systemd:
    daemon_reexec: yes
    scope: user
  environment:
    DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS|default('unix:path=/run/user/' +  ansible_effective_user_id|string + '/bus') }}"

- name: Enable container-haproxy.service
  ansible.builtin.systemd:
    name: container-haproxy
    enabled: yes
    scope: user
  environment:
    DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS|default('unix:path=/run/user/' +  ansible_effective_user_id|string + '/bus') }}"

- name: Start container-haproxy.service
  ansible.builtin.systemd:
    name: container-haproxy
    state: started
    scope: user
  environment:
    DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS|default('unix:path=/run/user/' +  ansible_effective_user_id|string + '/bus') }}"
