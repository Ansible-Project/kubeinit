---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


#
# Gather information
#

- name: Gather the package facts
  ansible.builtin.package_facts:
  no_log: true

- name: Install podman if required
  ansible.builtin.package:
    state: present
    name: "podman"
  when: "'podman' not in ansible_facts.packages"

- name: Get list of existing remote system connection definitions
  ansible.builtin.shell: |
    set -eo pipefail
    podman --remote system connection list | sed -e 1d -e 's/[* ].*//'
  args:
    executable: /bin/bash
  register: list_remote_connections
  changed_when: "list_remote_connections.rc == 0"

- name: Remove any existing remote system connection definition for bastion hypervisor
  ansible.builtin.shell: |
    set -eo pipefail
    podman --remote system connection remove {{ item }}
  args:
    executable: /bin/bash
  loop: "{{ list_remote_connections.stdout_lines | list }}"
  register: remove_remote_connection
  changed_when: "remove_remote_connection.rc == 0"

- name: Get the public key we will use to access the service pod
  become: false
  ansible.builtin.command: cat ~/.ssh/id_rsa.pub
  register: services_public_key
  changed_when: "services_public_key.rc == 0"

- name: Set the fact for the service pod public key
  ansible.builtin.set_fact:
    kubeinit_services_public_key: "{{ services_public_key.stdout }}"

#
# Prepare localhost environment
#
- name: Reset local ssh keys
  ansible.builtin.shell: |
    set -o pipefail
    ssh-keygen -R  {{ item }} || true
    ssh-keygen -R  {{ item }}.{{ kubeinit_inventory_cluster_name }}.{{ kubeinit_inventory_cluster_domain }} || true
    ssh-keygen -R  {{ hostvars[item].ansible_host }} || true
  with_items: "{{ groups['all_nodes'] }}"
  args:
    executable: /bin/bash
  register: prepare_reset_keys
  changed_when: "prepare_reset_keys.rc == 0"

- name: Get Ansible user host public key
  ansible.builtin.command: cat ~/.ssh/id_rsa.pub
  register: public_key_content
  changed_when: "public_key_content.rc == 0"
  delegate_to: "{{ kubeinit_bastion_host }}"

- name: Register the public key of the root user from the host
  ansible.builtin.set_fact:
    kubeinit_provision_vms_public_key: "{{ public_key_content.stdout }}"
  with_items:
    - "{{ groups['all_hosts'] }}"
    - localhost
  delegate_to: "{{ item }}"

- name: Set localhost IPv4 address fact
  ansible.builtin.set_fact:
    localhost_ipv4_address: "{{ hostvars[groups['local_host'][0]].ansible_default_ipv4_address }}"

- name: Add ssh ProxyCommand option for all nodes
  ansible.builtin.add_host:
    name: "{{ item }}"
    ansible_ssh_common_args: >-
      {{ ansible_ssh_common_args }} -o ProxyCommand="ssh -W %h:%p -q root@{{ kubeinit_bastion_host_address }}"
  with_items: "{{ groups['all_nodes'] }}"
  when: kubeinit_bastion_host_address not in localhost_ipv4_address
