---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Gather hypervisor facts if needed
  ansible.builtin.include_tasks: prepare_hypervisors.yml
  vars:
    hypervisor_facts_set: "{{ hostvars['kubeinit-facts'] is defined }}"
  when: not hypervisor_facts_set

- name: Add task-prepare-hypervisors to tasks_completed
  ansible.builtin.add_host:
    name: 'kubeinit-facts'
    tasks_completed: "{{ hostvars['kubeinit-facts'].tasks_completed | union(['task-prepare-hypervisors']) }}"

- block:
    - name: Check to see if we should stop here
      ansible.builtin.debug: msg="Stopping after '{{ kubeinit_stop_after_task }}'"
    - name: End play
      ansible.builtin.meta: end_play
  when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task in hostvars['kubeinit-facts'].tasks_completed

- name: Define cluster fact names needed to prepare groups
  ansible.builtin.set_fact:
    kubeinit_cluster_name: "{{ kubeinit_inventory_cluster_name }}"
    kubeinit_cluster_fqdn: "{{ kubeinit_inventory_cluster_name }}.{{ kubeinit_inventory_cluster_domain }}"
    kubeinit_cluster_facts_name: 'kubeinit-facts'
    kubeinit_cluster_bastion_name:
      "{{ 'bastion' if (('bastion_host' not in groups) or ((groups['bastion_host'] | list | count) == 0)) else groups['bastion_host'][0] }}"
    kubeinit_cluster_ovn_central_name:
      "{{ 'ovn-central' if (('ovn_central_host' not in groups) or ((groups['ovn_central_host'] | list | count) == 0)) else groups['ovn_central_host'][0] }}"
  loop: "{{ ['localhost'] | union(groups['hypervisor_hosts']) }}"
  delegate_to: "{{ item }}"

- name: Prepare groups
  ansible.builtin.include_tasks: prepare_groups.yml

- name: Define group facts
  ansible.builtin.set_fact:
    kubeinit_cluster_hostvars: "{{ hostvars[kubeinit_cluster_facts_name] }}"
    kubeinit_bastion_host: "{{ hostvars[kubeinit_cluster_bastion_name].target }}"
    kubeinit_ovn_central_host: "{{ hostvars[kubeinit_cluster_ovn_central_name].target }}"
    kubeinit_first_controller_node: "{{ groups['all_controller_nodes'][0] }}"
    kubeinit_hypervisor_count: "{{ groups['hypervisor_hosts'] | length }}"
    kubeinit_controller_count: "{{ groups['all_controller_nodes'] | length }}"
    kubeinit_compute_count: "{{ groups['all_compute_nodes'] | length }}"
  loop: "{{ ['localhost'] | union(groups['hypervisor_hosts']) }}"
  delegate_to: "{{ item }}"

- name: Install podman if required
  ansible.builtin.package:
    state: present
    name: "podman"
  when: not hostvars['localhost'].podman_is_installed

- name: Define service node facts
  ansible.builtin.set_fact:
    kubeinit_apache_service_node: "{{ kubeinit_cluster_hostvars.services['apache'] | default(None) }}"
    kubeinit_bind_service_node: "{{ kubeinit_cluster_hostvars.services['bind'] | default(None) }}"
    kubeinit_dnsmasq_service_node: "{{ kubeinit_cluster_hostvars.services['dnsmasq'] | default(None) }}"
    kubeinit_haproxy_service_node: "{{ kubeinit_cluster_hostvars.services['haproxy'] | default(None) }}"
    kubeinit_nexus_service_node: "{{ kubeinit_cluster_hostvars.services['nexus'] | default(None) }}"
    kubeinit_nfs_service_node: "{{ kubeinit_cluster_hostvars.services['nfs'] | default(None) }}"
    kubeinit_provision_service_node: "{{ kubeinit_cluster_hostvars.services['provision'] }}"
    kubeinit_registry_service_node: "{{ kubeinit_cluster_hostvars.services['registry'] | default(None) }}"
  loop: "{{ ['localhost'] | union(groups['hypervisor_hosts']) }}"
  delegate_to: "{{ item }}"

- name: Gather facts from bastion host if it is not a hypervisor host
  block:

    - name: Gather facts from bastion_host if needed
      ansible.builtin.include_tasks: gather_host_facts.yml
      vars:
        kubeinit_deployment_node_name: "{{ kubeinit_bastion_host }}"

    - name: Generate an OpenSSH keypair with the default values (4096 bits, rsa) on bastion host
      community.crypto.openssh_keypair:
        path: "~/.ssh/{{ kubeinit_inventory_cluster_name }}_id_rsa"
        regenerate: 'never'
      register: _result_cluster_keypair
      delegate_to: "{{ kubeinit_bastion_host }}"

    - name: Add bastion host public key to cluster authorized_keys
      ansible.builtin.set_fact:
        authorized_keys_with_bastion: "{{ kubeinit_cluster_hostvars.authorized_keys | union([_result_cluster_keypair.public_key]) }}"

    - name: Set all cluster hypervisors fact
      ansible.builtin.add_host:
        name: "{{ kubeinit_cluster_facts_name }}"
        authorized_keys: "{{ authorized_keys_with_bastion }}"

    - name: Update kubeinit_cluster_hostvars
      ansible.builtin.set_fact:
        kubeinit_cluster_hostvars: "{{ hostvars[kubeinit_cluster_facts_name] }}"

  when: kubeinit_bastion_host not in groups['all_hosts']

- name: Add all cluster public keys to all hypervisors
  ansible.posix.authorized_key:
    user: root
    key: "{{ public_key }}"
    state: present
  loop: "{{ groups['all_hosts'] | product(kubeinit_cluster_hostvars.authorized_keys) | list }}"
  vars:
    host: "{{ item[0] }}"
    public_key: "{{ item[1] }}"
  delegate_to: "{{ host }}"

- name: Define additional host, node and services facts
  ansible.builtin.set_fact:
    kubeinit_bastion_host_address: "{{ hostvars[kubeinit_bastion_host].ssh_connection_address }}"
    kubeinit_apache_service_address: "{{ hostvars[kubeinit_apache_service_node].ansible_host | default(None) }}"
    kubeinit_bind_service_address: "{{ hostvars[kubeinit_bind_service_node].ansible_host | default(None) }}"
    kubeinit_dnsmasq_service_address: "{{ hostvars[kubeinit_dnsmasq_service_node].ansible_host | default(None) }}"
    kubeinit_haproxy_service_address: "{{ hostvars[kubeinit_haproxy_service_node].ansible_host | default(None) }}"
    kubeinit_nexus_service_address: "{{ hostvars[kubeinit_nexus_service_node].ansible_host | default(None) }}"
    kubeinit_nfs_service_address: "{{ hostvars[kubeinit_nfs_service_node].ansible_host | default(None) }}"
    kubeinit_provision_service_address: "{{ hostvars[kubeinit_provision_service_node].ansible_host }}"
    kubeinit_registry_service_address: "{{ hostvars[kubeinit_registry_service_node].ansible_host | default(None) }}"
    kubeinit_service_user: "root"
    kubeinit_service_user_dir: "/root"
    kubeinit_ingress_hostname: "ingress"
  loop: "{{ ['localhost'] | union(groups['hypervisor_hosts']) }}"
  delegate_to: "{{ item }}"

- name: Add ssh ProxyCommand option for all nodes
  ansible.builtin.add_host:
    name: "{{ item }}"
    ansible_ssh_common_args: >-
      {{ ansible_ssh_common_args }} -i ~/.ssh/{{ kubeinit_inventory_cluster_name }}_id_rsa -o ProxyCommand="ssh {{ ansible_ssh_common_args }} -i ~/.ssh/{{ kubeinit_inventory_cluster_name }}_id_rsa -W %h:%p -q root@{{ hostvars[kubeinit_ovn_central_host].ansible_host }}"
  with_items: "{{ groups['all_nodes'] }}"

- name: Add task-prepare-environment to tasks_completed
  ansible.builtin.add_host:
    name: "{{ kubeinit_cluster_facts_name }}"
    tasks_completed: "{{ kubeinit_cluster_hostvars.tasks_completed | union(['task-prepare-environment']) }}"

- name: Update kubeinit_cluster_hostvars
  ansible.builtin.set_fact:
    kubeinit_cluster_hostvars: "{{ hostvars[kubeinit_cluster_facts_name] }}"

- block:
    - name: Check to see if we should stop here
      ansible.builtin.debug: msg="Stopping after '{{ kubeinit_stop_after_task }}'"
    - name: End play
      ansible.builtin.meta: end_play
  when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task in kubeinit_cluster_hostvars.tasks_completed
