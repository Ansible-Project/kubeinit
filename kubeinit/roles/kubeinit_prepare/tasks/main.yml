---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Check to see if the hypervisor facts are set
  ansible.builtin.set_fact:
    hypervisor_facts_set: "{{ hostvars[groups['hypervisor_hosts'][0]].ansible_distribution is defined }}"

- name: We need to gather those facts
  block:

    - name: Gather hypervisor facts
      ansible.builtin.include_tasks: gather_host_facts.yml
      with_items:
        - "{{ groups['hypervisor_hosts'] | list }}"
      loop_control:
        loop_var: cluster_role_item
      vars:
        kubeinit_deployment_node_name: "{{ cluster_role_item }}"

    - block:
        - name: Check to see if we should stop here
          ansible.builtin.debug: msg="Stopping after 'task-gather-hypervisor-facts'"
        - name: End play
          ansible.builtin.meta: end_play
      when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task == 'task-gather-hypervisor-facts'

  when: not hypervisor_facts_set

- block:
    - name: Check to see if we should stop here
      ansible.builtin.debug: msg="Stopping after 'task-prepare-hypervisor'"
    - name: End play
      ansible.builtin.meta: end_play
  when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task == 'task-prepare-hypervisor'

- name: Define cluster facts name
  ansible.builtin.set_fact:
    kubeinit_cluster_localhost_name: "{{ kubeinit_inventory_cluster_name }}-localhost"
    kubeinit_cluster_facts_name: "{{ kubeinit_inventory_cluster_name }}-facts"

- name: Add localhost to the local_host group
  ansible.builtin.add_host:
    name: "{{ kubeinit_cluster_localhost_name }}"
    group: local_host
    ansible_host: localhost
    ansible_hostname: localhost
    inventory_hostname: localhost

- name: Gather localhost facts
  ansible.builtin.include_tasks: gather_host_facts.yml
  vars:
    kubeinit_deployment_node_name: "{{ kubeinit_cluster_localhost_name }}"

- name: Prepare groups
  ansible.builtin.include_tasks: prepare_groups.yml

- name: Define group facts
  ansible.builtin.set_fact:
    kubeinit_bastion_host: "{{ hostvars[groups['bastion_host'][0]].target }}"
    kubeinit_ovn_central_host: "{{ hostvars[groups['ovn_central_host'][0]].target }}"
    kubeinit_services_node: "{{ groups['all_service_nodes'][0] }}"
    kubeinit_first_controller_node: "{{ groups['all_controller_nodes'][0] }}"
    kubeinit_controller_count: "{{ groups['all_controller_nodes'] | length }}"
    kubeinit_compute_count: "{{ groups['all_compute_nodes'] | length }}"
    kubeinit_bootstrap_node: "{{ groups['bootstrap_node'][0] if ('bootstrap_node' in groups) else '' }}"

- name: Gather facts from bastion_host if needed
  ansible.builtin.include_tasks: gather_host_facts.yml
  vars:
    kubeinit_deployment_node_name: "{{ kubeinit_bastion_host }}"
    facts_known: "{{ hostvars[kubeinit_bastion_host].ansible_distribution is defined }}"
  when: not facts_known

- name: Define additional host, node and services facts
  ansible.builtin.set_fact:
    kubeinit_cluster_hostvars: "{{ hostvars[kubeinit_cluster_facts_name] }}"
    kubeinit_bastion_host_address: "{{ hostvars[kubeinit_bastion_host].ansible_default_ipv4_address }}"
    kubeinit_apache_service_address: "{{ hostvars[kubeinit_services_node].ansible_host }}"
    kubeinit_bind_service_address: "{{ hostvars[kubeinit_services_node].ansible_host }}"
    kubeinit_haproxy_service_node: "{{ kubeinit_services_node }}"
    kubeinit_haproxy_service_address: "{{ hostvars[kubeinit_services_node].ansible_host }}"
    kubeinit_haproxy_service_manager: "{{ hostvars[kubeinit_services_node].ansible_host if (hostvars[kubeinit_services_node].type == 'virtual') else hostvars[kubeinit_services_node].target }}"
    kubeinit_nexus_service_node: "{{ kubeinit_services_node }}"
    kubeinit_nexus_service_address: "{{ hostvars[kubeinit_services_node].ansible_host }}"
    kubeinit_nfs_service_address: "{{ hostvars[kubeinit_services_node].ansible_host }}"
    kubeinit_registry_service_node: "{{ kubeinit_services_node }}"
    kubeinit_registry_service_address: "{{ hostvars[kubeinit_services_node].ansible_host }}"
    kubeinit_provision_service_node: "{{ kubeinit_services_node }}"
    kubeinit_provision_service_address: "{{ hostvars[kubeinit_services_node].ansible_host }}"
    kubeinit_services_node_target: "{{ hostvars[kubeinit_services_node].target }}"
    kubeinit_service_user: "root"
    kubeinit_service_user_dir: "/root"
    kubeinit_ingress_hostname: "ingress"

- name: Prepare localhost
  ansible.builtin.include_tasks: prepare_localhost.yml

- name: Remove any existing ssh tunnels on bastion host
  ansible.builtin.shell: |
    set -eo pipefail
    hosts=$(for file in ~/.ssh/cm-root*; do echo $file; done | sed -n -e 's;.*@\(.*\):22;\1;p')
    for host in $hosts; do ssh -O exit -S "~/.ssh/cm-%r@%h:%p" $host; done
  args:
    executable: /bin/bash
  register: remove_ssh_tunnels
  changed_when: "remove_ssh_tunnels.rc == 0"
  delegate_to: "{{ kubeinit_bastion_host }}"

- block:
    - name: Check to see if we should stop here
      ansible.builtin.debug: msg="Stopping after 'task-prepare-environment'"
    - name: End play
      ansible.builtin.meta: end_play
  when: kubeinit_stop_after_task is defined and kubeinit_stop_after_task == 'task-prepare-environment'
