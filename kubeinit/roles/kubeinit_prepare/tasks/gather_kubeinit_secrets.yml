---
# Copyright kubeinit contributors
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Set hostname we use to set kubeinit secrets
  ansible.builtin.set_fact:
    kubeinit_secrets_name: 'kubeinit-secrets'

- name: Initialize secrets dictionary and task log visibility in kubeinit secrets
  ansible.builtin.add_host:
    name: "{{ kubeinit_secrets_name }}"
    groups: 'kubeinit_secrets'
    secrets: "{{ hostvars[kubeinit_secrets_name].secrets | default({}) }}"
    tasks_hidden: "{{ not (lookup('env', 'KUBEINIT_SECRET_SHOW_TASKS') or false) }}"

- name: Set kubeinit_secrets_hostvars
  ansible.builtin.set_fact:
    kubeinit_secrets_hostvars: "{{ hostvars[kubeinit_secrets_name] }}"
    _secrets: []

- name: If running from the container we read secrets from podman run secrets
  block:

    - name: Collect requested secrets from container
      ansible.builtin.set_fact:
        _secrets: "{{ _secrets | union([item | combine({'secret_path': _secret_path})]) }}"
      loop: "{{ kubeinit_secrets_hostvars.kubeinit_secrets }}"
      vars:
        _secret_path: "{{ '/run/secrets/' + item.secret_name }}"
      when: item.secret_name in _param_secret_names

  no_log: "{{ kubeinit_secrets_hostvars.tasks_hidden }}"
  when: hostvars[kubeinit_facts_name].container_run

- name: If not running from the container we read secrets from paths set in environment variables
  block:

    - name: Collect requested secrets from environment
      ansible.builtin.set_fact:
        _secrets: "{{ _secrets | union([item | combine({'secret_path': _secret_path})]) }}"
      loop: "{{ kubeinit_secrets_hostvars.kubeinit_secrets }}"
      vars:
        _secret_path: "{{ lookup('env', item.envvar_name) }}"
      when: item.secret_name in _param_secret_names and lookup('env',item.envvar_name) | default('') | length > 0

  no_log: "{{ kubeinit_secrets_hostvars.tasks_hidden }}"
  when: not hostvars[kubeinit_facts_name].container_run

- name: Check for secret files
  ansible.builtin.stat:
    path: "{{ secret['secret_path'] }}"
  register: _result_secret_stat
  loop: "{{ _secrets }}"
  loop_control:
    loop_var: secret
  no_log: "{{ kubeinit_secrets_hostvars.tasks_hidden }}"
  when: secret['secret_path'] | default('') | length > 0

- name: Read secret values
  ansible.builtin.slurp:
    path: "{{ path.stat.path }}"
  register: _result_secret_values
  loop: "{{ _result_secret_stat.results }}"
  loop_control:
    loop_var: path
  no_log: "{{ kubeinit_secrets_hostvars.tasks_hidden }}"
  when: path.stat.exists | default(false)

- name: Put secret values into a dictionary
  ansible.builtin.set_fact:
    _kubeinit_secrets: "{{ _kubeinit_secrets | default({}) | combine({_key: _val}) }}"
  loop: "{{ _result_secret_values.results }}"
  loop_control:
    loop_var: _result
  vars:
    _key: "{{ _result.path.secret.secret_name }}"
    _val: "{{ _result.content }}"
  no_log: "{{ kubeinit_secrets_hostvars.tasks_hidden }}"
  when: _result.path.secret.secret_name is defined and _result.content | default('') | length > 0

- name: Add secrets to kubeinit secrets
  ansible.builtin.add_host:
    name: "{{ kubeinit_secrets_name }}"
    secrets: "{{ hostvars[kubeinit_secrets_name].secrets | combine(_kubeinit_secrets) }}"
  no_log: "{{ kubeinit_secrets_hostvars.tasks_hidden }}"
  when: _kubeinit_secrets is defined

- name: Clear facts
  ansible.builtin.set_fact:
    _secrets: []
    _result_secret_stat: {}
    _result_secret_values: {}
    _kubeinit_secrets: {}
  no_log: "{{ kubeinit_secrets_hostvars.tasks_hidden }}"

- name: Compatibility for older KUBEINIT_COMMON_* secrets
  block:

    #
    # Currently there are two ways of configuring
    # the docker.io credentials using the variable
    # kubeinit_docker_password
    #
    # If the kubeinit_docker_password variable
    # is the path of the file containing the password
    # we read the password from that file, and in the case
    # this path do not exists, then we asume that the
    # variable contains the password itself.
    #

    - name: Check if kubeinit_docker_password path exists
      ansible.builtin.stat:
        path: "{{ hostvars['kubeinit-env'].docker_password }}"
      register: _result_password_stat
      delegate_to: localhost

    - name: Read docker password from file when the variable contains a path
      ansible.builtin.slurp:
        src: "{{ hostvars['kubeinit-env'].docker_password }}"
      register: _result_password
      delegate_to: localhost
      when: _result_password_stat.stat.exists

    - name: Set password kubeinit secret
      ansible.builtin.add_host:
        name: "{{ kubeinit_secrets_name }}"
        secrets: "{{ hostvars[kubeinit_secrets_name].secrets | default({}) | combine({'dockerhub_password': _password_value}) }}"
      vars:
        _password_value: "{{ _result_password.content if (_result_password_stat.stat.exists) else (hostvars['kubeinit-env'].docker_password | b64encode) }}"

  no_log: "{{ kubeinit_secrets_hostvars.tasks_hidden }}"
  when: "'dockerhub_password' in _param_secret_names and hostvars[kubeinit_secrets_name].secrets['dockerhub_password'] is not defined and hostvars['kubeinit-env'].docker_password | default('') | length > 0"

- name: Clear any reference to docker password info
  ansible.builtin.set_fact:
    _result_password_stat: {}
    _result_password: {}
    _password_value: ''

- name: Clear kubeinit_secrets_hostvars
  ansible.builtin.set_fact:
    kubeinit_secrets_hostvars: {}
