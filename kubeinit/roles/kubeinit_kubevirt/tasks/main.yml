---
# Copyright 2020 KubeInit.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


# "kubeinit_kubevirt" will search for and load any operating system variable file

# found within the "vars/" path. If no OS files are found the task will skip.
- name: Gather variables for each operating system
  include_vars: "{{ item }}"
  with_first_found:
    - skip: true
      files:
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_major_version | lower }}.yml"
        - "{{ ansible_distribution | lower }}.yml"
        - "{{ ansible_os_family | lower }}-{{ ansible_distribution_version.split('.')[0] }}.yml"
        - "{{ ansible_os_family | lower }}.yml"
  tags:
    - always

# - name: Extra config script
#   set_fact:
#      kubeinit_kubevirt_extra_config_script: |
#        #!/usr/bin/bash
#        set -x
#        main() {
#        sudo rpm-ostree install policycoreutils-python-utils
#        sudo sed -i 's/enforcing/disabled/g' /etc/selinux/config /etc/selinux/config
#        }
#        main
#   tags:
#     - kubeinit_kubevirt
#
# - name: Update extra config script template for master nodes
#   template:
#     src: "99_kubeinit_extra_config.yaml.j2"
#     dest: "/root/99_kubeinit_extra_config_master.yaml"
#   delegate_to: "{{ item }}"
#   with_items: "{{ groups['okd_service_nodes'] }}"
#   vars:
#     node_type: master
#   tags:
#     - kubeinit_kubevirt
#
# - name: Update extra config script template for worker nodes
#   template:
#     src: "99_kubeinit_extra_config.yaml.j2"
#     dest: "/root/99_kubeinit_extra_config_worker.yaml"
#   delegate_to: "{{ item }}"
#   with_items: "{{ groups['okd_service_nodes'] }}"
#   vars:
#     node_type: worker
#   tags:
#     - kubeinit_kubevirt
#
# - name: Apply the extra config machineconfig object for the worker nodes
#   shell: |
#     export KUBECONFIG=~/install_dir/auth/kubeconfig
#     # Apply first on worker nodes, then in master nodes
#     oc apply -f /root/99_kubeinit_extra_config_worker.yaml
#   delegate_to: "{{ cluster_node }}"
#   with_items: "{{ groups['okd_service_nodes'] }}"
#   loop_control:
#     loop_var: cluster_node
#   ignore_errors: yes
#   register: cluster_extra_config
#   changed_when: "cluster_extra_config.rc == 0"
#   tags:
#     - kubeinit_kubevirt
#
# - name: pause until the ConfigMachine object is processed
#   pause:
#     minutes: 2
#   tags:
#     - kubeinit_kubevirt
#
# - name: "verify that worker nodes are ok"
#   shell: |
#     set -o pipefail
#     export KUBECONFIG=~/install_dir/auth/kubeconfig; \
#     oc get machineconfigpool/worker -ojson | jq -r '.status.conditions' | jq -c '.[] | select(.type | contains("Updated"))' | jq -r '.status'
#   args:
#     executable: /bin/bash
#   register: cmd_res
#   retries: 60
#   delay: 60
#   until: cmd_res.stdout == 'True'
#   delegate_to: "{{ cluster_node }}"
#   with_items: "{{ groups['okd_service_nodes'] }}"
#   loop_control:
#     loop_var: cluster_node
#   changed_when: "cmd_res.rc == 0"
#   tags:
#     - kubeinit_kubevirt
#
# - name: "wait for the worker nodes to start SSH"
#   wait_for:
#     port: 22
#     host: "{{ hostvars[item].ansible_host }}"
#     search_regex: OpenSSH
#     delay: 60
#     timeout: 7200
#   with_items: "{{ groups['okd_worker_nodes'] }}"
#   tags:
#     - kubeinit_kubevirt
#
# - name: Apply the extra config machineconfig object for the master nodes
#   shell: |
#     export KUBECONFIG=~/install_dir/auth/kubeconfig
#     oc apply -f /root/99_kubeinit_extra_config_master.yaml
#   delegate_to: "{{ cluster_node }}"
#   with_items: "{{ groups['okd_service_nodes'] }}"
#   loop_control:
#     loop_var: cluster_node
#   ignore_errors: yes
#   register: cluster_extra_config
#   changed_when: "cluster_extra_config.rc == 0"
#   tags:
#     - kubeinit_kubevirt
#
# - name: pause until the ConfigMachine object is processed
#   pause:
#     minutes: 2
#   tags:
#     - kubeinit_kubevirt
#
# - name: "verify that master nodes are ok"
#   shell: |
#     set -o pipefail
#     export KUBECONFIG=~/install_dir/auth/kubeconfig; \
#     oc get machineconfigpool/master -ojson | jq -r '.status.conditions' | jq -c '.[] | select(.type | contains("Updated"))' | jq -r '.status'
#   args:
#     executable: /bin/bash
#   register: cmd_res
#   retries: 60
#   delay: 60
#   until: cmd_res.stdout == 'True'
#   delegate_to: "{{ cluster_node }}"
#   with_items: "{{ groups['okd_service_nodes'] }}"
#   loop_control:
#     loop_var: cluster_node
#   changed_when: "cmd_res.rc == 0"
#   tags:
#     - kubeinit_kubevirt
#
# - name: "wait for the master nodes to start SSH"
#   wait_for:
#     port: 22
#     host: "{{ hostvars[item].ansible_host }}"
#     search_regex: OpenSSH
#     delay: 60
#     timeout: 7200
#   with_items: "{{ groups['okd_master_nodes'] }}"
#   tags:
#     - kubeinit_kubevirt


- name: "Install KubeVirt"
  shell: |
    set -o pipefail
    export KUBECONFIG=~/install_dir/auth/kubeconfig;
    export KUBEVIRT_VERSION="v0.32.0"
    # Latest
    # export KUBEVIRT_VERSION=$(curl -s https://api.github.com/repos/kubevirt/kubevirt/releases | grep tag_name | grep -v -- - | sort -V | tail -1 | awk -F':' '{print $2}' | sed 's/,//' | xargs)
    echo $KUBEVIRT_VERSION
    kubectl create -f https://github.com/kubevirt/kubevirt/releases/download/${KUBEVIRT_VERSION}/kubevirt-operator.yaml
    kubectl create -f https://github.com/kubevirt/kubevirt/releases/download/${KUBEVIRT_VERSION}/kubevirt-cr.yaml
    curl -L -o virtctl https://github.com/kubevirt/kubevirt/releases/download/${KUBEVIRT_VERSION}/virtctl-${KUBEVIRT_VERSION}-linux-x86_64
    chmod +x virtctl
  args:
    executable: /bin/bash
  register: cmd_res
  changed_when: "cmd_res.rc == 0"
  delegate_to: "{{ cluster_node }}"
  with_items: "{{ groups['okd_service_nodes'] }}"
  loop_control:
    loop_var: cluster_node
  tags:
    - kubeinit_kubevirt
