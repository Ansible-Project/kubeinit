---
- name: Verify the certificate variables are set
  ansible.builtin.fail:
    msg:
    - "Must specify kubeinit_registry_certificate_country"
    - "kubeinit_registry_certificate_country: {{ kubeinit_registry_certificate_country }}"
  when: ( kubeinit_registry_certificate_country is not defined )
    or  ( kubeinit_registry_certificate_country is none )
    or  ( kubeinit_registry_certificate_country | trim | length == 0 )

- name: Verify the certificate variables are set
  ansible.builtin.fail:
    msg:
    - "Must specify kubeinit_registry_certificate_state"
    - "kubeinit_registry_certificate_state: {{ kubeinit_registry_certificate_state }}"
  when: ( kubeinit_registry_certificate_state is not defined )
    or  ( kubeinit_registry_certificate_state is none )
    or  ( kubeinit_registry_certificate_state | trim | length == 0 )

- name: Verify the certificate variables are set
  ansible.builtin.fail:
    msg:
    - "Must specify kubeinit_registry_certificate_locality"
    - "kubeinit_registry_certificate_locality: {{ kubeinit_registry_certificate_locality }}"
  when: ( kubeinit_registry_certificate_locality is not defined )
    or  ( kubeinit_registry_certificate_locality is none )
    or  ( kubeinit_registry_certificate_locality | trim | length == 0 )

- name: Verify the certificate variables are set
  ansible.builtin.fail:
    msg:
    - "Must specify kubeinit_registry_certificate_organization"
    - "kubeinit_registry_certificate_organization: {{ kubeinit_registry_certificate_organization }}"
  when: ( kubeinit_registry_certificate_organization is not defined )
    or  ( kubeinit_registry_certificate_organization is none )
    or  ( kubeinit_registry_certificate_organization | trim | length == 0 )

- name: Verify the certificate variables are set
  ansible.builtin.fail:
    msg:
    - "Must specify kubeinit_registry_certificate_organizational_unit"
    - "kubeinit_registry_certificate_organizational_unit: {{ kubeinit_registry_certificate_organizational_unit }}"
  when: ( kubeinit_registry_certificate_organizational_unit is not defined )
    or  ( kubeinit_registry_certificate_organizational_unit is none )
    or  ( kubeinit_registry_certificate_organizational_unit | trim | length == 0 )

- name: Generate the htpasswd entry
  community.general.htpasswd:
    path: "{{ kubeinit_registry_directory_auth }}/htpasswd"
    name: "{{ kubeinit_registry_user }}"
    password: "{{ kubeinit_registry_password }}"
    owner: "{{ kubeinit_service_user }}"
    group: "{{ kubeinit_service_user }}"
    crypt_scheme: "bcrypt"
    mode: '0755'

- name: Set disconnected_auth
  ansible.builtin.set_fact:
    disconnected_registry_up: "{{ kubeinit_registry_user }}:{{ kubeinit_registry_password }}"

- name: Create registry auth for pullsecret
  ansible.builtin.set_fact:
    # The spaces after the first single quote is required, do not remove
    # Something in Ansible appears to be recognizing this as valid Python,
    # so it's getting transformed into a Python list and then serialized
    # using Python's str(), which is why we end up with the single-quoted values.
    disconnected_auth: '  {"{{ kubeinit_registry_uri }}": {"auth": "{{ disconnected_registry_up | b64encode }}" } }'

- name: append auths to pullsecret
  ansible.builtin.shell: |
    set -o pipefail
    echo '{{ kubeinit_registry_pullsecret }}' | jq -c \
      '.auths += {{ disconnected_auth }}'
  args:
    executable: /bin/bash
  register: new_pullsecret
  changed_when: "new_pullsecret.rc == 0"

- name: Override final kubeinit_registry_pullsecret with both auths
  ansible.builtin.set_fact:
    kubeinit_registry_pullsecret: '  {{ new_pullsecret.stdout }}'

- name: Debug the creds dictionary
  ansible.builtin.debug:
    var: kubeinit_registry_pullsecret

- name: Write auth for disconnected registry auth details
  ansible.builtin.copy:
    content: '  {{ kubeinit_registry_pullsecret }}'
    dest: "~/{{ kubeinit_registry_auth_file }}"
    mode: '0755'
    backup: yes
    force: yes

- name: Generate an OpenSSL private key
  community.crypto.openssl_privatekey:
    path: "{{ kubeinit_registry_directory_cert }}/domain.key"

- name: Generate an OpenSSL CSR
  community.crypto.openssl_csr:
    path: "{{ kubeinit_registry_directory_cert }}/domain.csr"
    privatekey_path: "{{ kubeinit_registry_directory_cert }}/domain.key"
    common_name: "{{ kubeinit_registry_fqdn }}"
    country_name: "{{ kubeinit_registry_certificate_country }}"
    state_or_province_name: "{{ kubeinit_registry_certificate_state }}"
    locality_name: "{{ kubeinit_registry_certificate_locality }}"
    organization_name: "{{ kubeinit_registry_certificate_organization }}"
    organizational_unit_name: "{{ kubeinit_registry_certificate_organizational_unit }}"
    basic_constraints_critical: yes
    create_subject_key_identifier: yes
    basic_constraints: ['CA:TRUE']
    subject_alt_name: "{{ item.value | map('regex_replace', '^', 'DNS:') | list }}"
  with_dict:
    dns_server:
    - "{{ kubeinit_registry_host }}"
    - "{{ kubeinit_registry_fqdn }}"
    - "{{ kubeinit_registry_fqdn_alt }}"

- name: Generate a selfsigned OpenSSL CA Certificate
  community.crypto.x509_certificate:
    path: "{{ kubeinit_registry_directory_cert }}/domainCA.crt"
    privatekey_path: "{{ kubeinit_registry_directory_cert }}/domain.key"
    csr_path: "{{ kubeinit_registry_directory_cert }}/domain.csr"
    provider: selfsigned

- name: Generate an ownca OpenSSL Certificate
  community.crypto.x509_certificate:
    path: "{{ kubeinit_registry_directory_cert }}/domain.crt"
    ownca_privatekey_path: "{{ kubeinit_registry_directory_cert }}/domain.key"
    csr_path: "{{ kubeinit_registry_directory_cert }}/domain.csr"
    ownca_path: "{{ kubeinit_registry_directory_cert }}/domainCA.crt"
    ownca_create_authority_key_identifier: yes
    provider: ownca

- name: Copy cert to pki directory
  ansible.builtin.copy:
    src: "{{ kubeinit_registry_directory_cert }}/domain.crt"
    dest: /etc/pki/ca-trust/source/anchors/domain.crt
    remote_src: yes
    group: "{{ kubeinit_service_user }}"
    owner: "{{ kubeinit_service_user }}"
    mode: 0644
    force: yes
    backup: yes
  become: true
  when: kubeinit_inventory_cluster_distro == 'k8s' or kubeinit_inventory_cluster_distro == 'okd' or kubeinit_inventory_cluster_distro == 'eks'

- name: Copy cert to pki directory
  ansible.builtin.copy:
    src: "{{ kubeinit_registry_directory_cert }}/domain.crt"
    dest: /usr/local/share/ca-certificates/domain.crt
    remote_src: yes
    group: "{{ kubeinit_service_user }}"
    owner: "{{ kubeinit_service_user }}"
    mode: 0644
    force: yes
    backup: yes
  become: true
  when: kubeinit_inventory_cluster_distro == 'rke' or kubeinit_inventory_cluster_distro == 'cdk'

- name: Install all certs in ubuntu
  ansible.builtin.shell: |
    set -e
    mkdir -p /usr/local/share/ca-certificates/kubeinit/
    openssl x509 -inform PEM -in {{ kubeinit_registry_directory_cert }}/domainCA.crt > {{ kubeinit_registry_directory_cert }}/domainCA.pem
    cp {{ kubeinit_registry_directory_cert }}/* /usr/local/share/ca-certificates/kubeinit/
  register: install_all_certs
  changed_when: "install_all_certs.rc == 0"
  become: true
  when: kubeinit_inventory_cluster_distro == 'rke' or kubeinit_inventory_cluster_distro == 'cdk'

- name: Update the CA trust files
  ansible.builtin.command: update-ca-trust extract
  register: update_ca_trust_files
  changed_when: "update_ca_trust_files.rc == 0"
  become: true
  when: kubeinit_inventory_cluster_distro == 'k8s' or kubeinit_inventory_cluster_distro == 'okd' or kubeinit_inventory_cluster_distro == 'eks'

- name: Update the CA trust files
  ansible.builtin.command: update-ca-certificates
  register: update_ca_certs
  changed_when: "update_ca_certs.rc == 0"
  become: true
  when: kubeinit_inventory_cluster_distro == 'rke' or kubeinit_inventory_cluster_distro == 'cdk'

- name: Create a podman container to serve the registry
  containers.podman.podman_container:
    name: "{{ kubeinit_registry_pod_name }}"
    image: docker.io/library/registry:2
    state: stopped
    network: host
    volumes:
    - "{{ kubeinit_registry_directory_data }}:/var/lib/registry:z"
    - "{{ kubeinit_registry_directory_auth }}:/auth:z"
    - "{{ kubeinit_registry_directory_cert }}:/certs:z"
    env:
      REGISTRY_AUTH: htpasswd
      REGISTRY_AUTH_HTPASSWD_REALM: Registry
      REGISTRY_HTTP_SECRET: ALongRandomSecretForRegistry
      REGISTRY_AUTH_HTPASSWD_PATH: auth/htpasswd
      REGISTRY_HTTP_TLS_CERTIFICATE: certs/domain.crt
      REGISTRY_HTTP_TLS_KEY: certs/domain.key
      REGISTRY_COMPATIBILITY_SCHEMA1_ENABLED: true
  register: registry_podman_container_info

- name: Setting Podman facts about the container that will run the registry
  ansible.builtin.set_fact:
    container_registry_name: "{{ registry_podman_container_info.container.Name }}"
    container_registry_pidfile: "{{ registry_podman_container_info.container.ConmonPidFile }}"

- name: Ensure user specific systemd instance are persistent
  ansible.builtin.command: |
    /usr/bin/loginctl enable-linger {{ kubeinit_service_user }}
  register: systemd_instance_persist
  changed_when: "systemd_instance_persist.rc == 0"

- name: Create systemd user directory
  ansible.builtin.file:
    path: "{{ kubeinit_service_user_dir }}/.config/systemd/user"
    state: directory
    owner: "{{ kubeinit_service_user }}"
    group: "{{ kubeinit_service_user }}"
    mode: '0775'

- name: Copy the podman systemd service file
  ansible.builtin.copy:
    content: |
      [Unit]
      Description=Podman container-registry.service
      [Service]
      Restart=on-failure
      ExecStart=/usr/bin/podman start {{ container_registry_name }}
      ExecStop=/usr/bin/podman stop -t 10 {{ container_registry_name }}
      KillMode=none
      Type=forking
      PIDFile={{ container_registry_pidfile }}
      [Install]
      WantedBy=default.target
    dest: "{{ kubeinit_service_user_dir }}/.config/systemd/user/container-registry.service"
    owner: "{{ kubeinit_service_user }}"
    group: "{{ kubeinit_service_user }}"
    mode: '0644'

- name: Reload systemd service
  ansible.builtin.systemd:
    daemon_reexec: yes
    scope: user
  environment:
    DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS|default('unix:path=/run/user/' +  ansible_effective_user_id|string + '/bus') }}"

- name: Enable container-registry.service
  ansible.builtin.systemd:
    name: container-registry
    enabled: yes
    scope: user
  environment:
    DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS|default('unix:path=/run/user/' +  ansible_effective_user_id|string + '/bus') }}"

- name: Start container-registry.service
  ansible.builtin.systemd:
    name: container-registry
    state: started
    scope: user
  environment:
    DBUS_SESSION_BUS_ADDRESS: "{{ ansible_env.DBUS_SESSION_BUS_ADDRESS|default('unix:path=/run/user/' +  ansible_effective_user_id|string + '/bus') }}"

- name: Read in the contents of domain.crt
  ansible.builtin.slurp:
    src: "{{ kubeinit_registry_directory_cert }}/domain.crt"
  register: domain_cert_b64

- name: Set trustbundle fact to contents of domain.crt
  ansible.builtin.set_fact:
    trustbundle: "{{ domain_cert_b64.content | string | b64decode }}"

- name: Fetch the domain cert from the registry host
  ansible.builtin.fetch:
    dest: /tmp/domain.crt
    src: "{{ kubeinit_registry_directory_cert }}/domain.crt"
    flat: yes

- name: Create temporary pullsecret file
  ansible.builtin.copy:
    content: "{{ kubeinit_registry_pullsecret }}"
    dest: "{{ kubeinit_service_user_dir }}/pullsecret.json"
    mode: '0755'
    force: yes

- name: Check if the registry is up and running
  ansible.builtin.shell: |
    set -o pipefail
    set -e
    curl -v --silent --user {{ kubeinit_registry_user }}:{{ kubeinit_registry_password }} https://{{ kubeinit_registry_uri }}/v2/_catalog --stderr - | grep '\{"repositories":'
    # curl -v --silent --user {{ kubeinit_registry_user }}:{{ kubeinit_registry_password }} https://{{ kubeinit_registry_uri }}/v2/openshift/tags/list
  args:
    executable: /bin/bash
  register: check_registry
  changed_when: "check_registry.rc == 0"

- name: Load images file
  ansible.builtin.slurp:
    src: ~/kubeinit_deployment_images.txt
  register: load_images

- name: Set up variable with images list
  ansible.builtin.set_fact:
    kubeinit_registry_images: "{{ (load_images.content | b64decode).split('\n') | select() | list }}"
