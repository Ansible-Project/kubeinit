---
name: distro_test
on:
  push:
    paths-ignore:
      - 'docs/**'
  pull_request:
  # Run the functional tests every 8 hours.
  # This will help to identify faster if
  # there is a CI failure related to a
  # change in any dependency.
  schedule:
    - cron: '0 */8 * * *'
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        sudo apt update -y
        sudo apt install jq -y
        sudo apt-get remove ansible -y
        sudo python3 -m pip uninstall ansible
        sudo python3 -m pip install ansible==3.4.0
        sudo locale-gen en_US.UTF-8
        sudo dpkg-reconfigure locales
        sudo apt install build-essential findutils -y
        sudo apt-get --purge autoremove python3-pip
        sudo apt install python3-pip
        sudo python3 -m pip install --upgrade pip
        sudo python3 -m pip install --upgrade virtualenv
        sudo python3 -m pip install --upgrade setuptools
        sudo python3 -m pip install -r ./test-requirements.txt
    - name: Check SSH config
      run: |
        cat > sshd_config <<EOF
          SyslogFacility AUTHPRIV
          PermitRootLogin yes
          AuthorizedKeysFile	.ssh/authorized_keys
          PasswordAuthentication yes
          ChallengeResponseAuthentication no
          UsePAM yes
          UseDNS no
          X11Forwarding no
          PrintMotd no
        EOF
        sudo mv sshd_config /etc/ssh/sshd_config
        sudo systemctl restart ssh
    - name: Create ssh key and enable passwordless access
      run: >
        sudo su <<EOF
            ssh-keygen -t rsa -b 4096 -N '' -f ~/.ssh/id_rsa
            cat ~/.ssh/id_rsa.pub | tee -a ~/.ssh/authorized_keys
            chmod 600 ~/.ssh/authorized_keys
            chmod 700 ~/.ssh
            sudo chmod -c 0755 ~/
            echo "Host nyctea" > ~/.ssh/config
            echo "  Hostname $(hostname)" >> ~/.ssh/config
            ls -la ~/.ssh
            # echo "Test to nyctea"
            # ssh -i ~/.ssh/id_rsa -o BatchMode=yes -o StrictHostKeyChecking=no $(whoami)@nyctea
            # echo "Test to localhost"
            # ssh -i ~/.ssh/id_rsa -o BatchMode=yes -o StrictHostKeyChecking=no $(whoami)@localhost
        EOF
    - name: Run the deployment from a container
      run: |
        # There is no need to install the collection before this step.
        # The collection is compiled and installed when we create
        # the kubeinit container using the code in the current path.
        sudo su <<EOF
            whoami
            podman build -t kubeinit/kubeinit .
            podman run --rm -it \
                -v ~/.ssh/id_rsa:/root/.ssh/id_rsa:z \
                -v ~/.ssh/id_rsa.pub:/root/.ssh/id_rsa.pub:z \
                -v ~/.ssh/config:/root/.ssh/config:z \
                    localhost/kubeinit/kubeinit:latest \
                    -v \
                    -e kubeinit_spec=cdk-libvirt-1-0-1-c \
                    -e kubeinit_stop_after_task='task-prepare-cluster' \
                    -e kubeinit_libvirt_create_cloud_user=true \
                    -e kubeinit_inventory_hosted_deployment=true \
                    -e kubeinit_ignore_validation_checks=true \
                    -i ./kubeinit/inventory \
                    ./kubeinit/playbook.yml
        EOF
