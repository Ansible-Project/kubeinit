---
# This job will execute a release:
# Ansible galaxy new release
# GitHub release with tag
# Mirror to GitLab
# Documents release
name: release
on:
  push:
    branches:
      - master
jobs:
  release_sw:
    if: github.repository_owner == 'Kubeinit'
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          sudo apt update -y
          sudo apt install jq -y
          sudo apt-get remove ansible -y
          sudo python3 -m pip uninstall ansible
          sudo python3 -m pip install ansible ansible-base
          sudo locale-gen en_US.UTF-8
          sudo dpkg-reconfigure locales
          sudo apt install build-essential findutils -y
          sudo apt-get --purge autoremove python3-pip
          sudo apt install python3-pip
          sudo python3 -m pip install --upgrade pip
          sudo python3 -m pip install --upgrade virtualenv
          sudo python3 -m pip install --upgrade setuptools
          sudo python3 -m pip install -r ./test-requirements.txt
          sudo python3 -m pip install tox shyaml
          sudo python3 -m pip install twine

      - name: Create collection build and publish
        run: |
          chmod +x ./tools/release.sh
          sudo GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} \
               QUAY_USER=${{ secrets.QUAY_USER }} \
               QUAY_KEY=${{ secrets.QUAY_KEY }} \
               GALAXY_KEY=${{ secrets.GALAXY_KEY }} \
               ./tools/release.sh
      - name: Create pypi package and publish
        run: |
          ./tools/pypi_publish.sh -k ${{ secrets.PYPI_TOKEN }}
      - name: Install latest Kubeinit agent version build locally if we published a new version
        run: |
          cd ./agent
          if [ -d "./dist" ]
          then
              python3 -m pip install --force dist/*
              kubeinit -v
          fi
      - name: Mirror to GitLab
        run: |
          git clone https://github.com/Kubeinit/kubeinit.git kubeinit_mirror
          cd kubeinit_mirror
          git branch -r | grep -v -- ' -> ' | while read remote; do git branch --track "${remote#origin/}" "$remote" 2>&1 | grep -v ' already exists'; done || true
          git fetch --all
          git pull --all
          sed -i 's/https:\/\/github\.com\/Kubeinit\/kubeinit\.git/https:\/\/github-access:${{ secrets.GITLAB_TOKEN }}@gitlab\.com\/kubeinit\/kubeinit.git/g' .git/config
          git push --force --all origin

  release_docs:
    needs: release_sw
    runs-on: ubuntu-latest
    steps:
      - name: Use checkout v2 with all git log available
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Render the projects roles and inventory diagrams
        run: |
          sudo apt-get install graphviz -y
          sudo apt-get remove ansible -y
          sudo python3 -m pip uninstall ansible
          sudo python3 -m pip install ansible ansible-base
          sudo python3 -m pip install --upgrade pip
          sudo python3 -m pip install --upgrade virtualenv
          sudo python3 -m pip install --upgrade setuptools
          sudo python3 -m pip install --upgrade ansible-inventory-grapher
          sudo python3 -m pip install --upgrade ansible-playbook-grapher

          distros=()
          for p in ./hosts/*/
          do
            distros=$(echo ${distros} ${p:8:-1})
          done

          for distro in ${distros}; do
              filename=${distro}.yml
              echo "ansible-playbook-grapher -e kubeinit_inventory_cluster_distro=${distro} ./playbooks/$filename --include-role-tasks -o ./docs/src/static/playbook_$filename"
              ansible-playbook-grapher -e kubeinit_inventory_cluster_distro=${distro} ./playbooks/$filename --include-role-tasks -o ./docs/src/static/playbook_$filename
          cat << EOF >> ./docs/src/playbook_diagrams.rst

          $filename playbook architecture
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

          .. image:: static/playbook_$filename.svg
            :width: 400
            :alt: Alternative text

          EOF
          done

          for distro in ${distros}; do
              filename=${distro}
              echo "ansible-inventory-grapher -i ./hosts/$filename/inventory all -a 'rankdir=LR;' -q | dot -Tpng > ./docs/src/static/inventory_$filename.png"
              ansible-inventory-grapher -i hosts/$filename/inventory all -a 'rankdir=LR;' -q | dot -Tpng > ./docs/src/static/inventory_$filename.png
          cat << EOF >> ./docs/src/inventory_diagrams.rst

          $filename inventory architecture
          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

          .. image:: static/inventory_$filename.png
            :width: 400
            :alt: Alternative text

          EOF
          done

          cat ./docs/src/playbook_diagrams.rst
          cat ./docs/src/inventory_diagrams.rst
      - name: Render the changelog file
        run: |
          GITCHANGELOG_CONFIG_FILENAME=./tools/gitchangelog.rc ./tools/gitchangelog.py > ./docs/src/changelog.rst
          cat ./docs/src/changelog.rst
      - uses: kubeinit/sphinx-action@master
        with:
          pre-build-command: |
            apt-get update -y && \
            apt install build-essential -y && \
            apt install gcc -y && \
            touch /tmp/sphinx-log && \
            pip3 install --upgrade pip && \
            pip3 install --upgrade virtualenv && \
            pip3 install --upgrade setuptools && \
            pip3 install -r test-requirements.txt && \
            pip3 install --upgrade ruamel.yaml && \
            pip3 install --upgrade sphinx-rtd-theme && \
            ansible-galaxy collection build kubeinit -v --force --output-path . && \
            LATEST=$(ls kubeinit-kubeinit*.tar.gz | grep -v latest | sort -V | tail -n1) && \
            ln -sf $LATEST kubeinit-kubeinit-latest.tar.gz && \
            ansible-galaxy collection install --force kubeinit-kubeinit-latest.tar.gz
          docs-folder: "docs/src/"
      - uses: actions/upload-artifact@v1
        with:
          name: DocumentationHTML
          path: docs/src/_build/html/
          if-no-files-found: error
      - name: Commit documentation changes
        run: |
          git clone https://github.com/kubeinit/kubeinit.git --branch gh-pages --single-branch gh-pages
          cp -r docs/src/_build/html/* gh-pages/
          cd gh-pages
          git config --local user.email "bot@kubeinit.com"
          git config --local user.name "KubeInit's bot"
          git add .
          git commit -m "Update documentation" -a || true
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          force: true
          branch: gh-pages
          directory: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}
