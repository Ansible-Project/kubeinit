---
# Copyright kubeinit.com
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: "verify that all the csr are loaded"
  shell: |
    export KUBECONFIG=~/install_dir/auth/kubeconfig; \
    oc get csr | grep bootstrapper
  register: cmd_res
  retries: 60
  delay: 60
  until: cmd_res.stdout_lines | list | count == ( groups['okd-master-nodes'] | count + groups['okd-worker-nodes'] | count )
  # Delegated to be executed in the service node but
  # After the master nodes are deployed
  delegate_to: "{{ cluster_node }}"
  with_items: "{{ groups['okd-service-nodes'] }}"
  loop_control:
    loop_var: cluster_node
  tags:
    - provision_libvirt


- name: "aprove CSRâ€™s"
  shell: |
    export KUBECONFIG=~/install_dir/auth/kubeconfig; \
    oc get csr -ojson | jq -r '.items[] | .metadata.name' | xargs oc adm certificate approve
  delegate_to: "{{ cluster_node }}"
  with_items: "{{ groups['okd-service-nodes'] }}"
  loop_control:
    loop_var: cluster_node
  ignore_errors: yes
  tags:
    - provision_libvirt


- name: "wait until all nodes are ready"
  shell: |
    export KUBECONFIG=~/install_dir/auth/kubeconfig; \
    oc get nodes | grep " Ready"
  register: cmd_res
  retries: 60
  delay: 60
  until: cmd_res.stdout_lines | list | count == ( (groups['okd-master-nodes'] | count) + (groups['okd-worker-nodes'] | count) )
  # Delegated to be executed in the service node but
  # After the master nodes are deployed
  delegate_to: "{{ cluster_node }}"
  with_items: "{{ groups['okd-service-nodes'] }}"
  loop_control:
    loop_var: cluster_node
  tags:
    - provision_libvirt

- name: "remove bootstrap node from haproxy"
  shell: |
    sed -i '/bootstrap/s/^/#/' /etc/haproxy/haproxy.cfg
    systemctl reload haproxy
  delegate_to: "{{ cluster_node }}"
  with_items: "{{ groups['okd-service-nodes'] }}"
  loop_control:
    loop_var: cluster_node
  ignore_errors: yes
  tags:
    - provision_libvirt

#
# Configure PV
#

- name: "Render the bootstrap details"
  shell: |
    cat << EOF > ~/registry_pv.yaml
    apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: image-registry-pv
    spec:
      capacity:
        storage: 100Gi
      accessModes:
        - ReadWriteMany
      storageClassName: nfs01
      persistentVolumeReclaimPolicy: Retain
      nfs:
        path: /var/nfsshare/registry
        server: {{ hostvars[groups['okd-service-nodes'][0]].ansible_host }}
    EOF
    cat << EOF > ~/registry_pvc.yaml
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: image-registry-pvc
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 100Gi
        storageClassName: nfs01
        volumeMode: Filesystem
    EOF
    export KUBECONFIG=~/install_dir/auth/kubeconfig
    oc create -f ~/registry_pv.yaml
    oc create -f ~/registry_pvc.yaml
    oc get pvc -n openshift-image-registry
    oc get pv
    oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"managementState":"Managed"}}'
    oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"pvc":{"claim":"image-registry-pvc"}}}}'
    oc get clusteroperator image-registry
  delegate_to: "{{ cluster_node }}"
  with_items: "{{ groups['okd-service-nodes'] }}"
  loop_control:
    loop_var: cluster_node
  ignore_errors: yes
  tags:
    - provision_libvirt

# echo "show info" | socat unix-connect:/var/lib/haproxy/stats stdio
# echo "show stat" | socat unix-connect:/var/lib/haproxy/stats stdio
# echo "show errors" | socat unix-connect:/var/lib/haproxy/stats stdio
# echo "show sess" | socat unix-connect:/var/lib/haproxy/stats stdio
