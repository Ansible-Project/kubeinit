---
# Copyright kubeinit.com
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- debug:
    msg: |
      Deploying {{ kubeinit_deployment_role }} nodes
      This will take around 1 hour to complete and
      the Ansible output might seems to be stuck
      connect from the hypervisor using
          virsh list --all
          virsh connect okd-xxx-01
      to see the install process output
  tags:
    - provision_libvirt

- name: "Create VM definition for the {{ kubeinit_deployment_role }} nodes"
  shell: |
    kernel={{ kubeinit_provision_target_image_dir }}/{{ kubeinit_provision_source_images.coreos.kernel }}
    initrd={{ kubeinit_provision_target_image_dir }}/{{ kubeinit_provision_source_images.coreos.initrd }}
    kernel_args='ip=dhcp rd.neednet=1 console=tty0 console=ttyS0 coreos.inst.stream=stable coreos.inst.install_dev={{ hostvars[item].root_device }} coreos.inst.image_url=http://{{ hostvars[groups['okd-service-nodes'][0]].ansible_host }}:8080/okd4/fcos.raw.xz coreos.inst.ignition_url=http://{{ hostvars[groups['okd-service-nodes'][0]].ansible_host }}:8080/okd4/fcos.raw.xz.sig'
    # If you use the kernel args to deploy the machine
    # Is not possible to render the template as --print-xml > vm.xml
    # If so then is good to have it like 'virsh define vm.xml'
    virt-install \
        --connect qemu:///system \
        --name={{ item }} \
        --ram={{ hostvars[item].ram // 1024 }} \
        --cpuset=auto \
        --vcpus=4,maxvcpus=8 \
        --os-type=linux \
        --os-variant=fedora31 \
        --autostart \
        --network network=net-01,mac={{ hostvars[item].mac }},model=virtio \
        --disk size={{ hostvars[item].disk | replace('G','') }},readonly=false \
        --install kernel=${kernel},initrd=${initrd},kernel_args_overwrite=yes,kernel_args="${kernel_args}"
  with_items: "{{ groups['okd-master-nodes'] + groups['okd-worker-nodes'] + groups['okd-bootstrap-nodes'] }}"
  changed_when: false
  when: kubeinit_deployment_role in item
  tags:
    - provision_libvirt

- name: "wait for {{ kubeinit_deployment_role }} nodes to start SSH"
  wait_for:
    port: 22
    host: "{{ hostvars[item].ansible_host }}"
    search_regex: OpenSSH
    delay: 10
    timeout: 7200
  with_items: "{{ groups['okd-master-nodes'] + groups['okd-worker-nodes'] + groups['okd-bootstrap-nodes'] }}"
  when: kubeinit_deployment_role in item
  tags:
    - provision_libvirt

- name: "verify that {{ kubeinit_deployment_role }} nodes are ok"
  shell: |
    export KUBECONFIG=~/install_dir/auth/kubeconfig; \
    oc get nodes | grep {{ kubeinit_deployment_role }} | grep " Ready"
  register: cmd_res
  retries: 60
  delay: 60
  until: cmd_res.stdout_lines | list | count == groups['okd-{{ kubeinit_deployment_role }}-nodes'] | count
  # Delegated to be executed in the service node but
  # After the master nodes are deployed
  delegate_to: "{{ cluster_node }}"
  with_items: "{{ groups['okd-service-nodes'] }}"
  loop_control:
    loop_var: cluster_node
  when: "'master' in kubeinit_deployment_role"
  tags:
    - provision_libvirt
