---
# Copyright kubeinit.com
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

##
## Hypervisor installing dependencies and rebooting.
##

- name: Fails if not Centos
  fail:
    msg: The hypervisor machine needs to be CentOS/RHEL
  when: not (ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat' or ansible_distribution == 'Fedora')
  tags:
    - provision_libvirt

- name: Fails if not 8 or 30
  fail:
    msg: CentOS/RHEL version in the hypervisor machine must be 8.x or Fedora 30
  when: not (ansible_distribution_version|int == 8 or ansible_distribution_version|int == 30)
  tags:
    - provision_libvirt

- name: check if /root/.ssh/known_hosts exists
  stat:
    path: /root/.ssh/known_hosts
  register: known_hosts_file
  tags:
    - provision_libvirt

- name: Reset ssh keys in hypervisor
  shell: |
    ssh-keygen -R  {{ item.name }}
    ssh-keygen -R  {{ item.name }}.{{ kubeinit_provision_cluster_domain }}
    ssh-keygen -R  {{ item.eth0.ip }}
  with_items: "{{ kubeinit_provision_cluster_hosts }}"
  when: known_hosts_file.stat.exists | bool
  changed_when: false
  tags:
    - provision_libvirt

- name: reset ssh keys for hostname
  become: no
  delegate_to: localhost
  command: "ssh-keygen -R  {{ item.name }}"
  with_items: "{{ kubeinit_provision_cluster_hosts }}"
  changed_when: false
  tags:
    - provision_libvirt

- name: reset ssh keys for FQDN
  become: no
  delegate_to: localhost
  command: "ssh-keygen -R  {{ item.name }}.{{ kubeinit_provision_cluster_domain }}"
  with_items: "{{ kubeinit_provision_cluster_hosts }}"
  changed_when: false
  tags:
    - provision_libvirt

- name: reset ssh keys for ip address
  become: no
  delegate_to: localhost
  command: "ssh-keygen -R  {{ item.eth0.ip }}"
  with_items: "{{ kubeinit_provision_cluster_hosts }}"
  changed_when: false
  tags:
    - provision_libvirt

- name: Disable SELinux
  selinux:
    state: disabled
  tags:
    - provision_libvirt

- name: install requirements
  package:
    name: "{{ kubeinit_provision_hypervisor_dependencies }}"
    state: present
  tags:
    - provision_libvirt

- name: upgrade all packages
  yum:
    name: '*'
    state: latest
  register: upgraded_packages
  tags:
    - provision_libvirt

- name: Reboot host and wait for it to restart
  reboot:
    msg: "Reboot initiated by a package upgrade"
    connect_timeout: 5
    reboot_timeout: 600
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: whoami
  when: upgraded_packages is changed
  tags:
    - provision_libvirt

- name: download all images to hypervisor
  get_url:
    validate_certs: False
    use_proxy: True
    url: "{{ item.uri }}{{ item.name }}"
    dest: "{{ kubeinit_provision_target_image_dir }}/"
    force: no
    mode: '0644'
    owner: qemu
  with_items: "{{ kubeinit_provision_source_images }}"
  tags:
    - provision_libvirt

- name: Extract qcow from compressed file and change permissions
  shell: |
    STR='{{ item.name }}'
    SUB='.qcow2.xz'
    if [[ "$STR" == *"$SUB" ]]; then
      xz --decompress --force {{ kubeinit_provision_target_image_dir }}/{{ item.name }}
    fi
    chown qemu. {{ kubeinit_provision_target_image_dir }}/{{ item.name | replace('.qcow2.xz','.qcow2') }}
    chmod 644 {{ kubeinit_provision_target_image_dir }}/{{ item.name | replace('.qcow2.xz','.qcow2') }}
  with_items: "{{ kubeinit_provision_source_images }}"
  tags:
    - provision_libvirt

- name: "Make sure we have a '{{ kubeinit_provision_cloud_user }}' group"
  group:
    name: "{{ kubeinit_provision_cloud_user }}"
    state: present
  tags:
    - provision_libvirt

- name: "Allow '{{ kubeinit_provision_cloud_user }}' group to have passwordless sudo"
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: "^%{{ kubeinit_provision_cloud_user }}"
    line: "%{{ kubeinit_provision_cloud_user }} ALL=(ALL) NOPASSWD: ALL"
    validate: 'visudo -cf %s'
  tags:
    - provision_libvirt

- name: "Add sudoers users to {{ kubeinit_provision_cloud_user }} group"
  user: "name={{ kubeinit_provision_cloud_user }} groups={{ kubeinit_provision_cloud_user }} append=yes state=present createhome=yes"
  tags:
    - provision_libvirt

- name: Add Users to libvirt
  action: user name="{{ item }}" groups="kvm,libvirt" append=yes
  with_items:
    - "{{ kubeinit_provision_cloud_user }}"
    - root
  tags:
    - provision_libvirt

- name: check if /usr/bin/qemu-kvm exists
  stat:
    path: /usr/bin/qemu-kvm
  register: qemu_kvm
  tags:
    - provision_libvirt

- name: Create symbolic link for qemu
  file:
    src: /usr/libexec/qemu-kvm
    dest: /usr/bin/qemu-kvm
    state: link
  when: not qemu_kvm.stat.exists | bool
  tags:
    - provision_libvirt

- name: Create ssh folder
  file:
    path: "/home/{{ kubeinit_provision_cloud_user }}/.ssh/"
    state: directory
  tags:
    - provision_libvirt

- name: Generate an OpenSSH keypair with the default values (4096 bits, rsa)
  openssh_keypair:
    path: "/root/.ssh/id_rsa"
    owner: root
    group: root
  tags:
    - provision_libvirt

- name: Generate an OpenSSH keypair with the default values (4096 bits, rsa)
  openssh_keypair:
    path: "/home/{{ kubeinit_provision_cloud_user }}/.ssh/id_rsa"
    owner: "{{ kubeinit_provision_cloud_user }}"
    group: "{{ kubeinit_provision_cloud_user }}"
  tags:
    - provision_libvirt

- name: Fix owner of the generated pub key
  file:
    path: "/home/{{ kubeinit_provision_cloud_user }}/.ssh/id_rsa.pub"
    owner: "{{ kubeinit_provision_cloud_user }}"
    group: "{{ kubeinit_provision_cloud_user }}"
  tags:
    - provision_libvirt

- name: Insert the default libvirt uri in user's home
  lineinfile:
    path: "/home/{{ kubeinit_provision_cloud_user }}/.bashrc"
    line: export LIBVIRT_DEFAULT_URI=qemu:///system
  tags:
    - provision_libvirt

##
## Destroy all VMs and networks
##

- name: Destroy vms
  virt:
      name: "{{ item.name }}"
      command: destroy
  with_items: "{{ kubeinit_provision_cluster_hosts }}"
  ignore_errors: true
  tags:
    - provision_libvirt

- name: Undefine vms
  virt:
      name: "{{ item.name }}"
      command: undefine
  with_items: "{{ kubeinit_provision_cluster_hosts }}"
  ignore_errors: true
  tags:
    - provision_libvirt

- name: Remove VMs storage
  file:
    state: absent
    path: "{{ kubeinit_provision_target_image_dir }}/{{ item.name }}.qcow2"
  with_items: "{{ kubeinit_provision_cluster_hosts }}"
  tags:
    - provision_libvirt

- name: Destroy deployment networks
  virt_net:
    command: destroy
    name: "{{ item.name }}"
  with_items: "{{ kubeinit_provision_cluster_nets }}"
  ignore_errors: true
  tags:
    - provision_libvirt

- name: Undefine deployment networks
  virt_net:
    command: undefine
    name: "{{ item.name }}"
  with_items: "{{ kubeinit_provision_cluster_nets }}"
  ignore_errors: true
  tags:
    - provision_libvirt

- name: Destroy default network
  virt_net:
    command: destroy
    name: "default"
  ignore_errors: true
  tags:
    - provision_libvirt

- name: Undefine default network
  virt_net:
    command: undefine
    name: "default"
  ignore_errors: true
  tags:
    - provision_libvirt

##
## Config folders for guests details
##

- name: Clean directories for config files per node
  file:
    state: absent
    path: "{{ kubeinit_provision_hypervisor_tmp_dir }}/{{ item.name }}/"
  with_items: "{{ kubeinit_provision_cluster_hosts }}"
  tags:
    - provision_libvirt

- name: Create directories for config files per node
  file:
    path: "{{ kubeinit_provision_hypervisor_tmp_dir }}/{{ item.name }}"
    state: directory
    mode: 0775
    recurse: yes
  with_items: "{{ kubeinit_provision_cluster_hosts }}"
  tags:
    - provision_libvirt

#
# Define common resources, networks
#

- name: render the net configuration
  template:
    src: "nets.xml.j2"
    dest: '{{ kubeinit_provision_hypervisor_tmp_dir }}/nets.xml'
  with_items: "{{ kubeinit_provision_cluster_nets }}"
  tags:
    - provision_libvirt

- name: define KubeInit networks with DHCP enabled
  virt_net:
    command: define
    name: "{{ item.name }}"
    xml: '{{ lookup("template", "nets.xml.j2") }}'
  with_items: "{{ kubeinit_provision_cluster_nets }}"
  tags:
    - provision_libvirt

- name: Activate KubeInit networks
  virt_net:
    state: active
    name: "{{ item.name }}"
  with_items: "{{ kubeinit_provision_cluster_nets }}"
  tags:
    - provision_libvirt

- name: Autostart KubeInit networks
  virt_net:
    autostart: yes
    name: "{{ item.name }}"
  with_items: "{{ kubeinit_provision_cluster_nets }}"
  tags:
    - provision_libvirt
